<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blueberrymann.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blueberrymann.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-05T12:23:45+00:00</updated><id>https://blueberrymann.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">子集 &amp;amp; 20250205每日一题</title><link href="https://blueberrymann.github.io/blog/2025/%E5%AD%90%E9%9B%86/" rel="alternate" type="text/html" title="子集 &amp;amp; 20250205每日一题"/><published>2025-02-05T03:56:07+00:00</published><updated>2025-02-05T03:56:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E5%AD%90%E9%9B%86</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E5%AD%90%E9%9B%86/"><![CDATA[<h1 id="知识点">知识点</h1> <h2 id="十进制和二进制之间的相互转化">十进制和二进制之间的相互转化</h2> <ul> <li>利用按位与操作符<code class="language-plaintext highlighter-rouge">&amp;</code>可以实现 ```cpp #include &lt;bits/stdc++.h&gt;</li> </ul> <p>using namespace std;</p> <p>int main(void){ vector<int> t; int mask = 8; for(int i = 0; i &lt;= 3; i ++){ if(mask &amp; (1 &lt;&lt; i)){ t.push_back(1); }else{ t.push_back(0); } }</int></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(int i = 3; i &gt;= 0; i --){
    cout &lt;&lt; t[i];
}

return 0; } ```
</code></pre></div></div> <h1 id="子集">子集</h1> <p><img src="/assets/img/screenshot/子集.png" alt=""/></p> <h2 id="解题思路">解题思路</h2> <ul> <li>我们可以发现，子集的表示可以转化为使用二进制表示</li> <li>例如：<code class="language-plaintext highlighter-rouge">n = 3, nums[] = [1, 2, 3]</code>的子集可以用二进制数串表示</li> </ul> <p>| ID | 二进制 | 子集 | |—-|——–|————| | 0 | 000 | [] | | 1 | 001 | [3] | | 2 | 010 | [2] | | 3 | 011 | [2, 3] | | 4 | 100 | [1] | | 5 | 101 | [1, 3] | | 6 | 110 | [1, 2] | | 7 | 111 | [1, 2, 3] |</p> <ul> <li>所以我们只需要枚举每种二进制表示，即可求得所有子集</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>



    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">subsets</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">t</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="c1">// 枚举所有二进制表示</span>
            <span class="c1">// 一共有2^n项</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)){</span>
                    <span class="c1">// 用来找到二进制表示中“1”对应的数字</span>
                    <span class="n">t</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="子集ii">子集II</h1> <p><img src="/assets/img/screenshot/子集2.png" alt=""/></p> <h2 id="解题思路-1">解题思路</h2> <h3 id="题解做法">题解做法</h3> <ul> <li>先对<code class="language-plaintext highlighter-rouge">nums</code>进行排序</li> <li>首先还是按照题目<strong>子集</strong>进行查找</li> <li>在查找过程中，如果发现前一个相同的数字没有参加到此子集的查找中，说明必定重复，可以中止当前搜索</li> </ul> <h3 id="我的做法">我的做法</h3> <ul> <li>首先还是按照题目<strong>子集</strong>进行查找</li> <li>但是由于数组中有重复的元素，我们在查找到所有子集后需要去重 <ul> <li>当我们在寻找到一个子集后对其进行排序，这样保证了如果两个子集中的元素是相同的，我们通过<strong>去重模版</strong>可以将其删去</li> <li>在返回<code class="language-plaintext highlighter-rouge">ans</code>前，对其进行去重</li> </ul> </li> <li>去重模版</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sort</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
<span class="n">alls</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</code></pre></div></div> <h2 id="实现代码-1">实现代码</h2> <h3 id="题解做法-1">题解做法</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">subsetsWithDup</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mask</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">t</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">mask</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">)){</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]){</span>
                        <span class="c1">// mask &gt;&gt; (i - 1) &amp; 1 == 0</span>
                        <span class="c1">// 是用来判断有没有选择上一个数</span>
                        <span class="c1">// 这个顺序是从后往前来的</span>
                        <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="n">t</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">){</span>
                    <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="我的做法-1">我的做法</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">subsetsWithDup</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mask</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="n">mask</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">t</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">mask</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">)){</span>
                    <span class="n">t</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">sort</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">t</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">ans</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习区间和思想和板子]]></summary></entry><entry><title type="html">区间合并</title><link href="https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/" rel="alternate" type="text/html" title="区间合并"/><published>2025-02-04T07:56:45+00:00</published><updated>2025-02-04T07:56:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"><![CDATA[<h1 id="区间合并">区间合并</h1> <p><img src="/assets/img/screenshot/区间合并.png" alt=""/></p> <h2 id="用例演示">用例演示</h2> <p><img src="/assets/img/screenshot/区间合并_1.png" alt=""/></p> <ul> <li>多个蓝色小区间可以合并为三个绿色区间</li> </ul> <h2 id="解题思路">解题思路</h2> <p><img src="/assets/img/screenshot/区间合并_2.png" alt=""/></p> <ul> <li>情况1：无需改变当前区间</li> <li>情况2：将当前区间的<code class="language-plaintext highlighter-rouge">end</code>向后延伸</li> <li>情况3：当前区间的任务已经完成，可以将当前区间放入答案集中，并将原区间<code class="language-plaintext highlighter-rouge">start</code>和<code class="language-plaintext highlighter-rouge">end</code>更新为粉色区间的<code class="language-plaintext highlighter-rouge">start</code>和<code class="language-plaintext highlighter-rouge">end</code></li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">PII</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="n">segs</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">segs</span><span class="p">){</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
    
    
    <span class="n">sort</span><span class="p">(</span><span class="n">segs</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">segs</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2e9</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2e9</span><span class="p">;</span>
    <span class="c1">// 注意这里end也是-2e9，因为是从左边来的，不能是2e9,否则就比不了啦！</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">seg</span><span class="o">:</span> <span class="n">segs</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">seg</span><span class="p">.</span><span class="n">first</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">start</span> <span class="o">!=</span> <span class="o">-</span><span class="mf">2e9</span><span class="p">){</span>
                <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">});</span>
            <span class="p">}</span>
            <span class="n">start</span> <span class="o">=</span> <span class="n">seg</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span> <span class="n">seg</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">seg</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 将最后一段合并区间也放入答案中</span>
    <span class="k">if</span><span class="p">(</span><span class="n">start</span> <span class="o">!=</span> <span class="o">-</span><span class="mf">2e9</span><span class="p">)</span>
        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">});</span>
        
    <span class="n">segs</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
        
        <span class="n">segs</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">});</span>
    <span class="p">}</span>
    
    <span class="n">merge</span><span class="p">(</span><span class="n">segs</span><span class="p">);</span>
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">segs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习区间合并思想和板子]]></summary></entry><entry><title type="html">高精度</title><link href="https://blueberrymann.github.io/blog/2025/%E9%AB%98%E7%B2%BE%E5%BA%A6/" rel="alternate" type="text/html" title="高精度"/><published>2025-02-04T07:56:45+00:00</published><updated>2025-02-04T07:56:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E9%AB%98%E7%B2%BE%E5%BA%A6</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E9%AB%98%E7%B2%BE%E5%BA%A6/"><![CDATA[<h1 id="高精度减法">高精度减法</h1> <p><img src="/assets/img/screenshot/高精度减法.png" alt=""/></p> <h2 id="解题思路">解题思路</h2> <p><img src="/assets/img/screenshot/高精度减法_1.png" alt=""/></p> <ul> <li>对于减法中每一位的运算，我们可以设被减数该位为$A_i$，减数该位为$B_i$，上一位的借位为$t$，那么将分为以下两种情况 <ul> <li>如果$A_i - B_i - t &gt;= 0$，那么该位运算结果为$A_i - B_i - t$</li> <li>如果$A_i - B_i - t &lt; 0$，那么该位运算结果为$10 + A_i - B_i - t$</li> </ul> </li> <li>对于减法的整体运算，设被减数为$A$，减数为$B$ <ul> <li>如果$A - B \geq 0$，直接计算$A - B$</li> <li>如果$A - B &lt; 0$，则计算$B - A$</li> </ul> </li> <li>感觉本题的主要难度在模拟减法的过程</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">B</span><span class="p">){</span>
    <span class="c1">// 判断A &gt;= B?</span>
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="n">B</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">B</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="k">return</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// 如果都一样，那么返回true</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sub</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">B</span><span class="p">){</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">t</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">B</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="n">t</span> <span class="o">-=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        
        <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">((</span><span class="n">t</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">c</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
    
    
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">;</span>
    
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">A</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">B</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
        
    <span class="k">if</span><span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)){</span>
        <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">);</span>
        
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-"</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="高精度乘法">高精度乘法</h1> <p><img src="/assets/img/screenshot/高精度乘法.png" alt=""/></p> <h2 id="解题思路-1">解题思路</h2> <p><img src="/assets/img//screenshot/高精度乘法_1.png" alt=""/></p> <ul> <li>$C_0 = (3\times 12) \% 10, t_1 = (3\times 12) $\$ 10$</li> <li>$C_1 = (2\times 12 + t_1) \% 10$, …</li> </ul> <h2 id="实现代码-1">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">mul</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">||</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="n">t</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
        
        <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
        <span class="n">t</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
        <span class="n">c</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>   
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">string</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
    
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">;</span>
    
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">A</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
        
    <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">mul</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
    
    
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="高精度除法">高精度除法</h1> <h2 id="实现代码-2">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">div</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">){</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">r</span> <span class="o">/</span> <span class="n">b</span><span class="p">);</span>
        <span class="n">r</span> <span class="o">%=</span> <span class="n">b</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">reverse</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">c</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    
    <span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
        <span class="n">c</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">string</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
    
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">;</span>
    
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">A</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
        
    <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">div</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
    
    
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习高精度思想和板子]]></summary></entry><entry><title type="html">区间和</title><link href="https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%92%8C/" rel="alternate" type="text/html" title="区间和"/><published>2025-02-04T03:21:07+00:00</published><updated>2025-02-04T03:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%92%8C</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E5%8C%BA%E9%97%B4%E5%92%8C/"><![CDATA[<p><img src="/assets/img/screenshot/区间和.png" alt=""/></p> <h1 id="离散化">离散化</h1> <p><img src="/assets/img/screenshot/区间和评论.png" alt=""/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1, 3, 5, ..., 1e9
</code></pre></div></div> <ul> <li>有几个数字，数值的范围特别大，但是个数比较少。</li> <li>有时候需要将数值特别大的数字作为下标使用，但是由于数值特别大，我们的存储空间无法满足要求</li> <li>所以我们要将这几个数字与连续的自然数建立<strong>映射</strong></li> <li>这个就叫做离散化</li> </ul> <table> <thead> <tr> <th>a[]</th> <th style="text-align: center">1</th> <th style="text-align: center">3</th> <th style="text-align: center">5</th> <th style="text-align: center">100000</th> <th>50000000</th> </tr> </thead> <tbody> <tr> <td>n</td> <td style="text-align: center">0</td> <td style="text-align: center">1</td> <td style="text-align: center">2</td> <td style="text-align: center">3</td> <td>4</td> </tr> </tbody> </table> <h2 id="存在的问题">存在的问题</h2> <ul> <li><code class="language-plaintext highlighter-rouge">a[]</code>中可能有重复的元素，需要<strong>去重</strong></li> <li>如何算出<code class="language-plaintext highlighter-rouge">x</code>离散化后的值</li> </ul> <h2 id="解决问题">解决问题</h2> <h3 id="去重">去重</h3> <ul> <li>在<code class="language-plaintext highlighter-rouge">c++</code>中，我们有一个专用的套路去除<code class="language-plaintext highlighter-rouge">vector</code>中的所有元素</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">alls</span><span class="p">;</span>
<span class="n">sort</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
<span class="n">alls</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>目前给定的数轴太长了，数据范围是[-1e9, 1e9]</li> <li>经过我们的分析，在这个数轴上，我们最多最多只能用到$3\times 1e5$个数</li> <li>所以我们要将这$3\times 1e5$的下标，排序后映射到从1开始的自然数</li> <li>假设下标映射后为k，那么我们让<code class="language-plaintext highlighter-rouge">a[k] += c</code></li> <li>那么我们该如何确定某个下标的映射<code class="language-plaintext highlighter-rouge">k</code>为多少呢？我们利用二分查找构建<code class="language-plaintext highlighter-rouge">find</code>函数，使用该函数在<strong>排好序、去好重</strong>的<code class="language-plaintext highlighter-rouge">alls</code>数组中进行查找，查找的内容就是这个下标映射的自然数位置</li> <li>通过以上这种方法，将插入操作和查询操作中的离散的下标都转化为了连续的、稠密的自然数下标</li> <li>之后利用前缀和进行求解</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">PII</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">alls</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="n">add</span><span class="p">,</span> <span class="n">query</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="c1">// 这个二分find的目的是找到数字插入的位置</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">alls</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">alls</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span>
        <span class="c1">// 这里需要研究一下</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">add</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">x</span><span class="p">,</span> <span class="n">c</span><span class="p">});</span>
        
        <span class="n">alls</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
        <span class="n">query</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">});</span>
        
        <span class="n">alls</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="n">alls</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
    <span class="p">}</span>
    
    
    <span class="n">sort</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">alls</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">alls</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">alls</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">item</span><span class="o">:</span> <span class="n">add</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="n">item</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">alls</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">item</span><span class="o">:</span> <span class="n">query</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
        
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">-</span> <span class="n">s</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习区间和思想和板子]]></summary></entry><entry><title type="html">20250204力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0204%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250204力扣每日一题"/><published>2025-02-04T01:16:07+00:00</published><updated>2025-02-04T01:16:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0204%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0204%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<p><img src="/assets/img/screenshot/按奇偶排序数组2.png" alt=""/></p> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">&amp;</code>按位与操作符可以用来判断奇偶，一个整型数字<code class="language-plaintext highlighter-rouge">&amp;</code>1 <ul> <li>如果结果是1，那么说明这个数字是奇数</li> <li>如果结果是0，那么说明这个数字是偶数</li> </ul> </li> </ul> <h2 id="解题思路">解题思路</h2> <h3 id="我的做法">我的做法</h3> <ul> <li>将整个<code class="language-plaintext highlighter-rouge">nums</code>数组遍历一遍，找出所有的奇数元素和偶数元素，并将它们分别输入进新开的奇数数组和偶数数组</li> <li>轮流将奇数数组和偶数数组输入到<code class="language-plaintext highlighter-rouge">ans</code>数组中，并返回<code class="language-plaintext highlighter-rouge">ans</code>数组</li> </ul> <h3 id="双指针做法">双指针做法</h3> <ul> <li>分别初始化两个指针<code class="language-plaintext highlighter-rouge">i</code>和<code class="language-plaintext highlighter-rouge">j</code>指向奇数和偶数，遍历原数组。</li> <li>如果遍历到了不符合位置的奇数，就开始遍历寻找不符合位置的偶数，并将其交换位置</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="我的做法-1">我的做法</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sortArrayByParityII</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">num</span><span class="o">:</span> <span class="n">nums</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">num</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">){</span>
                <span class="c1">// 奇数</span>
                <span class="n">a</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="c1">// 偶数</span>
                <span class="n">b</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="双指针做法-1">双指针做法</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sortArrayByParityII</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">){</span>
                <span class="k">while</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">){</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">nums</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">位运算</title><link href="https://blueberrymann.github.io/blog/2025/%E4%BD%8D%E8%BF%90%E7%AE%97/" rel="alternate" type="text/html" title="位运算"/><published>2025-02-03T15:02:37+00:00</published><updated>2025-02-03T15:02:37+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E4%BD%8D%E8%BF%90%E7%AE%97</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E4%BD%8D%E8%BF%90%E7%AE%97/"><![CDATA[<h1 id="n的二进制表示中第k位是几">n的二进制表示中第k位是几</h1> <h2 id="知识点">知识点</h2> <h3 id="按位与运算符">按位与运算符</h3> <ul> <li><code class="language-plaintext highlighter-rouge">&amp;</code>位运算符 <ul> <li>用于两个数字之间时，<code class="language-plaintext highlighter-rouge">&amp;</code>运算符会将两个数字的二进制表示进行逐位与运算</li> <li>运算规则为：只有当两个位都为1时，结果才为1，否则为0 <h3 id="计算机语言中的各种码">计算机语言中的各种码</h3> </li> </ul> </li> <li>给定$(x)_2 = 1010$，x为32位整数</li> <li>原码：0000 … 1010</li> <li>反码：1111 … 0101</li> <li>补码：1111 … 0110 (取反加一)</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>假设n = 6
n的二进制表示为0110
1的二进制表示为0001
那么n &amp; 1的结果为0000
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>求数字n的第k位，就将数字n右移k位并 <ul> <li>先把第k位移动到最后1位</li> <li>并把移动后的个位数 <code class="language-plaintext highlighter-rouge">&amp;</code>1 <h2 id="实现代码">实现代码</h2> </li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">--</span><span class="p">){</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="lowbit-操作">lowbit 操作</h1> <ul> <li>返回x的最后一位1，并且是一个二进制数 <ul> <li>如果$(x)_2 = 1010$，那么lowbit(x) = 10</li> <li>如果$(x)_2 = 101000$，那么lowbit(x) = 1000 <h2 id="实现原理">实现原理</h2> </li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">x &amp; -x</code></li> <li>在<code class="language-plaintext highlighter-rouge">c++</code>中，<code class="language-plaintext highlighter-rouge">-x</code>的二进制表示与<code class="language-plaintext highlighter-rouge">~x + 1</code>的二进制表示是相同的，其中<code class="language-plaintext highlighter-rouge">~x</code>是x的补码 <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         x = 1010 ... 100 ... 0
        ~x = 0101 ... 011 ... 1
    ~x + 1 = 0101 ... 100 ... 0
x &amp; (~x + 1) = 0000 ... 100 ... 0
</code></pre></div> </div> </li> <li>可以看到，x &amp; (~x + 1)的结果返回的就是最后一位1的二进制数</li> </ul> <h1 id="二进制中1的个数">二进制中1的个数</h1> <p><img src="/assets/img/screenshot/二进制中1的个数.png" alt=""/></p> <h2 id="解题思路-1">解题思路</h2> <ul> <li>通过多次<code class="language-plaintext highlighter-rouge">lowbit</code>操作，找到数字二进制中1的个数。每次进行玩<code class="language-plaintext highlighter-rouge">lowbit</code>操作，都会将最后1位1减去，实现数字的更新 <h2 id="实现代码-1">实现代码</h2> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">n</span> <span class="o">--</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
        
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
            <span class="n">x</span> <span class="o">-=</span> <span class="n">lowbit</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
            <span class="n">cnt</span> <span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习位运算思想和板子]]></summary></entry><entry><title type="html">双指针问题</title><link href="https://blueberrymann.github.io/blog/2025/%E5%8F%8C%E6%8C%87%E9%92%88/" rel="alternate" type="text/html" title="双指针问题"/><published>2025-02-03T12:35:00+00:00</published><updated>2025-02-03T12:35:00+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E5%8F%8C%E6%8C%87%E9%92%88</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E5%8F%8C%E6%8C%87%E9%92%88/"><![CDATA[<h1 id="最长连续不重复子序列">最长连续不重复子序列</h1> <h2 id="解题思路">解题思路</h2> <h3 id="双指针算法的样子">双指针算法的样子</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
	<span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="n">j</span> <span class="o">++</span><span class="p">;</span>
	<span class="c1">// 每道题的具体逻辑</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li><strong>最核心的性质</strong>：可以优化 <h3 id="核心思想">核心思想</h3> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
		<span class="c1">//代码实现的逻辑</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>可以将$\Omega(n^2)$的朴素算法优化到$\Omega(n)$</li> </ul> <h3 id="最长连续不重复子序列-1">最长连续不重复子序列</h3> <p><img src="https://cdn.acwing.com/media/article/image/2025/01/31/477965_372d0c12df-Snipaste_2025-01-31_12-38-16.png" alt="Snipaste_2025-01-31_12-38-16.png"/></p> <ul> <li>给定绿色右侧指针为当前的j（对于j的定义为：j往左能到的符合条件的、最远的地方），绿色左侧指针为假设我们还有一个j能更加左，但是这个与j的定义相矛盾，所以我们说j到i之间的距离就是最长连续不重复子序列的长度</li> <li>基本代码模版为：</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 朴素做法，复杂度为O(n)</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)){</span>
			<span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 双指针算法</span>
<span class="c1">// 发现一些单调性质，并利用</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
	<span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)){</span>
		<span class="n">j</span> <span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

<span class="p">}</span>
</code></pre></div></div> <h2 id="代码实现">代码实现</h2> <h3 id="双指针算法最基本的应用">双指针算法最基本的应用</h3> <ul> <li>提取用空格分隔开的单词</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
	<span class="n">gets</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
<span class="c1">//	这里一定要使用gets()，使用cin会导致第一个空格之后的字符没有被提取到 </span>
<span class="c1">//	cout &lt;&lt; str &lt;&lt; endl;</span>
<span class="c1">//	cin 使用 &gt;&gt; 运算符的时候，默认会跳过空白字符，直到遇到下一个空白字符停止读取</span>
<span class="c1">// 	所以cin只能读取到第一个单词 </span>
	
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
	
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">' '</span><span class="p">){</span>
			
			<span class="n">j</span> <span class="o">++</span><span class="p">;</span>
			
		<span class="p">}</span>
		
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
<span class="c1">//			注意 k ++ 这个语句是在一个循环块执行结束后执行 </span>
		<span class="p">}</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		
		<span class="n">i</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
	<span class="p">}</span>
	
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	
<span class="p">}</span>
</code></pre></div></div> <p>![[Pasted image 20250131121856.png]]</p> <h3 id="最长连续不重复子序列-2">最长连续不重复子序列</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">s</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">++</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
            <span class="n">s</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">--</span><span class="p">;</span>
            <span class="n">j</span> <span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="数组元素的目标和">数组元素的目标和</h1> <h2 id="实现思想">实现思想</h2> <ul> <li>暴力做法（容易超时）</li> <li>找单调性： <ul> <li>主要思路是<code class="language-plaintext highlighter-rouge">for(int i = 0; i &lt; n; i ++)</code>，找到一个<code class="language-plaintext highlighter-rouge">j</code>，使得$A_i+B_j\geq x$，同时<code class="language-plaintext highlighter-rouge">j</code>的下标是最小的</li> <li>当有满足条件的下标<code class="language-plaintext highlighter-rouge">i, j</code>出现的时候，直接输出答案并<code class="language-plaintext highlighter-rouge">break</code> <h2 id="实现代码">实现代码</h2> </li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        
        <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">){</span>
            <span class="n">j</span> <span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="判断子序列">判断子序列</h1> <p><img src="/assets/img/screenshot/判断子序列.png" alt=""/></p> <h2 id="解题思路-1">解题思路</h2> <ul> <li>对数组B中的每一个元素进行遍历，如果出现了一个数组A中的元素相同的元素（第一个），就将其与数组A中的映射关系记录下来 <img src="/assets/img/screenshot/判断子序列_1.png" alt=""/></li> <li>如果遍历完数组B，数组A中的每个元素都找到了，那么我们可以说数组B中存在一个数组A的子序列的匹配</li> <li>下面我们需要证明，如果数组B存在着数组A的子序列，那么上述算法一定可以找出一种匹配 <ul> <li>假定数组B中存在着一组匹配，我们遍历数组A的每个元素，在数组B中寻找与之匹配的元素</li> <li>如果找到了一个与数组A中元素相同，但是这个元素位于匹配中对应元素之前，如上图虚线所示（实线为假定的匹配）。</li> <li>我们可以将实线的匹配，替换为虚线的匹配。这样做我们发现，这其实是不会影响后续的匹配的，即说明，使用双指针算法可以找到存在的合法匹配。</li> </ul> </li> <li>在这种类似于“贪心”的算法中，证明充分必要性是很重要的，在本题中： <ul> <li>充分性：如果双指针算法找到了一个匹配，那么这确实是一个合法的子序列匹配</li> <li>必要性：如果存在一个合法的子序列匹配，那么双指针算法一定能够找到一个合法的匹配</li> <li>证明必要性的原因：通过证明必要性，即使存在其他的匹配，我们也可以证明即使是“贪心”地选择了第一个（相对地）匹配的元素，那么形成的匹配也是合法的。 <h2 id="实现代码-1">实现代码</h2> </li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
            <span class="n">i</span> <span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">j</span> <span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">n</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Yes"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"No"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    
<span class="p">}</span>
</code></pre></div></div> <h1 id="力扣习题">力扣习题</h1> <h3 id="移动零">移动零</h3> <p><img src="/assets/img/screenshot/移动零.png" alt=""/></p> <h4 id="实现思路需要注意的点">实现思路&amp;需要注意的点</h4> <ul> <li>初始化两个指针<code class="language-plaintext highlighter-rouge">l</code>和<code class="language-plaintext highlighter-rouge">r</code></li> <li>当<code class="language-plaintext highlighter-rouge">r</code>指针指向的数字为0时，指针<code class="language-plaintext highlighter-rouge">r</code>向后移动</li> <li>当<code class="language-plaintext highlighter-rouge">r</code>指针指向的数字不为0时，指针<code class="language-plaintext highlighter-rouge">l, r</code>向后移动，并将<code class="language-plaintext highlighter-rouge">l, r</code>分别指向的两个数字进行交换</li> <li>进行以上操作之后的效果为： <ul> <li>指针<code class="language-plaintext highlighter-rouge">l</code>左侧全为非零数字</li> <li>指针<code class="language-plaintext highlighter-rouge">r</code>和<code class="language-plaintext highlighter-rouge">l</code>之间都是零</li> </ul> </li> <li>当指针<code class="language-plaintext highlighter-rouge">r</code>移动到末尾时，操作完毕，此时的数字已经满足要求 <h4 id="实现代码-2">实现代码</h4> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">moveZeroes</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">){</span>
            <span class="c1">// left 和 right指针之间都是0</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]){</span>
                <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
                <span class="n">left</span> <span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">right</span> <span class="o">++</span><span class="p">;</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="盛水最多的容器">盛水最多的容器</h3> <p><img src="/assets/img/screenshot/盛水最多的容器.png" alt=""/></p> <h4 id="实现思路需要注意的点-1">实现思路&amp;需要注意的点</h4> <ul> <li>我们可以发现，在高度中，影响装的水的体积的因素，是两个高度中较矮的那个，即“木桶效应” <h5 id="进行数学证明">进行数学证明</h5> <ol> <li>给定<code class="language-plaintext highlighter-rouge">heights</code>数组存储所有木板的长度</li> <li>假设初始化两个指针<code class="language-plaintext highlighter-rouge">l</code>和<code class="language-plaintext highlighter-rouge">r</code>，其中<code class="language-plaintext highlighter-rouge">l</code>位于数组下标0处，<code class="language-plaintext highlighter-rouge">r</code>位于数组最末端（下标为数组长度减1）</li> <li>假设<code class="language-plaintext highlighter-rouge">heights[l]&lt;heights[r]</code>，那么我们可以得到，当前装载水的体积为<code class="language-plaintext highlighter-rouge">heights[l] * (r - l)</code>。</li> <li>如果我们此时移动<code class="language-plaintext highlighter-rouge">r</code>指针，那么水的体积会怎么变化呢？从下面的推断，可以发现移动<code class="language-plaintext highlighter-rouge">r</code>指针（高度较高的那个）是不会让水的体积变大的</li> </ol> <ul> <li>如果<code class="language-plaintext highlighter-rouge">heights[r_new] &lt;= heights[r]</code>，那么新的水体积<code class="language-plaintext highlighter-rouge">min(heights[r_new], heights[l]) &lt;= heights[l] * (r - l)</code></li> <li>如果<code class="language-plaintext highlighter-rouge">heights[r_new] &gt; heights[r]</code>，那么新的水的体积<code class="language-plaintext highlighter-rouge">min(heights[r_new], heights[l]) &gt; heights[l] * (r - l)</code> <ol> <li>我们应该移动<code class="language-plaintext highlighter-rouge">l</code>指针（高度较低的指针），才可能使得水体积变大</li> </ol> </li> <li>如果<code class="language-plaintext highlighter-rouge">heights[l_new] &lt;= heights[l]</code>，那么新的水体积一定小于等于原来的</li> <li>如果<code class="language-plaintext highlighter-rouge">heights[l_new] &gt; heights[l]</code>，那么新的水体积是大于原来水体积的 <ol> <li>综上所述，应该移动指向高度较低的指针，并向对侧移动（<code class="language-plaintext highlighter-rouge">l ++</code>和<code class="language-plaintext highlighter-rouge">r --</code>），才能找到能盛水最多的容器壁</li> </ol> </li> </ul> </li> </ul> <h4 id="实现代码-3">实现代码</h4> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">maxArea</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// int ans = 0;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="p">]);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="p">]);</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">*</span> <span class="n">h</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="p">])</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span> <span class="o">--</span><span class="p">];</span>
            <span class="k">else</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">l</span> <span class="o">++</span><span class="p">];</span>
            
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="三数之和">三数之和</h3> <p><img src="/assets/img/screenshot/三数之和.png" alt=""/></p> <h4 id="基础知识">基础知识</h4> <ul> <li><code class="language-plaintext highlighter-rouge">vector</code>的<code class="language-plaintext highlighter-rouge">find</code>函数的使用方法： <ul> <li><code class="language-plaintext highlighter-rouge">find(vec.begin(),vector.end(), val)</code></li> <li>返回的是一个迭代器</li> <li>如果找到了，返回的是对应元素的迭代器</li> <li>如果没找到返回的是 <h4 id="解题思路-2">解题思路</h4> </li> </ul> </li> <li>这道题其实也可以仿照双指针经典题目“两数之和”进行求解</li> <li>其中不同的地方在于，“两数之和”问题在获得解之后，立即<code class="language-plaintext highlighter-rouge">break</code>跳出循环，而我们这道题还需要继续寻找</li> <li>解决方法： <ul> <li>其实这道题是“三指针”问题</li> <li>我们首先确定<code class="language-plaintext highlighter-rouge">i</code>，指针<code class="language-plaintext highlighter-rouge">i</code>遍历数组中的每一个数字</li> <li>接下来确定<code class="language-plaintext highlighter-rouge">l</code>和<code class="language-plaintext highlighter-rouge">r</code>指针，从这里开始我们将问题转化为“两数之和” <ul> <li>首先初始化<code class="language-plaintext highlighter-rouge">l</code>和<code class="language-plaintext highlighter-rouge">r</code>的位置，其中<code class="language-plaintext highlighter-rouge">l</code>位于<code class="language-plaintext highlighter-rouge">i+1</code>的位置，<code class="language-plaintext highlighter-rouge">r</code>位于数组的最后一位，两个指针向数组的中央移动。为什么呢？<strong>这是因为我们解决双指针问题，需要利用单调性，确保一个指针移动的时候，另一个指针的移动是单调的，这样我们才能确保解题的唯一性！</strong></li> <li>另外一个是循环终止条件，我认为我第一次的解题TLE，主要是因为这里的循环终止条件（break条件）设置的不好</li> <li>我们设置的终止条件为<code class="language-plaintext highlighter-rouge">l == r</code>，此时如果<code class="language-plaintext highlighter-rouge">l</code>继续向右移动，获得的元素只会更大，无论如何也不可能满足<code class="language-plaintext highlighter-rouge">nums[l] + nums[r] == target</code></li> </ul> </li> </ul> </li> </ul> <h4 id="实现代码-4">实现代码</h4> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">threeSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="c1">// l从最左边，r从最右边开始，利用了数组排序后的单调性</span>
            <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">l</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]){</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">){</span>
                    <span class="n">r</span> <span class="o">--</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="c1">// 如果l == r，那么之后一定不会出现nums[l] + nums[r] = target(l &lt; r)</span>
                <span class="c1">// 如果l继续移动的话，和会越来越大，不会找到目标值的</span>
                <span class="c1">// 所以break就ok了</span>
                <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">){</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">){</span>
                    <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h4 id="这个是我研究1h的代码最后tle了">这个是我研究1h的代码，最后TLE了，🥲</h4> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">threeSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
        <span class="p">}</span>
        

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">l</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                
                <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">;</span>
                <span class="k">while</span><span class="p">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
                    <span class="n">r</span> <span class="o">--</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span> <span class="o">&amp;&amp;</span> <span class="n">l</span> <span class="o">!=</span> <span class="n">r</span><span class="p">){</span>
                    <span class="n">printf</span><span class="p">(</span><span class="s">"%d %d %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
                    <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                    <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="p">]);</span>
                    <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]);</span>
                    
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
                    <span class="c1">// sort(temp.begin(),temp.end());</span>
                    <span class="c1">// auto it = find(ans.begin(),ans.end(),temp);</span>
                    <span class="c1">// if(it == ans.end()){</span>
                    <span class="c1">//     ans.push_back(temp);</span>
                    <span class="c1">// }</span>
                    <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="k">break</span><span class="p">;</span>
                
            <span class="p">}</span>

        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="接雨水">接雨水</h3> <p><img src="/assets/img/screenshot/接雨水.png" alt=""/></p>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[使用双指针解决一系列问题]]></summary></entry><entry><title type="html">20250203力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250203力扣每日一题"/><published>2025-02-03T03:16:07+00:00</published><updated>2025-02-03T03:16:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98/"><![CDATA[<p><img src="/assets/img/screenshot/验证回文串2.png" alt=""/></p> <h2 id="解题思路">解题思路</h2> <h2 id="知识点">知识点</h2> <h3 id="验证回文串">验证回文串</h3> <ul> <li>解决回文串问题同样可以转化成双指针问题</li> <li>初始化两个指针，<code class="language-plaintext highlighter-rouge">l</code>指针从下标<code class="language-plaintext highlighter-rouge">0</code>处开始，<code class="language-plaintext highlighter-rouge">r</code>指针从下标<code class="language-plaintext highlighter-rouge">str.size() - 1</code>处开始，两个指针向中间移动</li> <li>逐个判断两个指针指向的字符是否相等，直到<code class="language-plaintext highlighter-rouge">l &gt;= r</code> <ul> <li>如果都相等，证明<code class="language-plaintext highlighter-rouge">str</code>是回文字符串</li> <li>如果都不相等，证明<code class="language-plaintext highlighter-rouge">str</code>不是回文字符串</li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">bool</span> <span class="nf">checkPalindrome</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="o">--</span><span class="n">j</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
            
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div> <h3 id="解决多一个字符的问题">解决多一个字符的问题</h3> <ul> <li>在此问题中，如果碰到了两个字符不相同的问题，根据题设，我们可以删掉一个字符，分为删掉<code class="language-plaintext highlighter-rouge">l</code>指针指向的字符或者<code class="language-plaintext highlighter-rouge">r</code>指针指向的字符，这就转化为下俩问题 <ul> <li>判断<code class="language-plaintext highlighter-rouge">[l + 1, r]</code>是不是回文串</li> <li>判断<code class="language-plaintext highlighter-rouge">[l, r - 1]</code>是不是回文串</li> </ul> </li> <li>如果经过以上判断，下列两种情况可以返回<code class="language-plaintext highlighter-rouge">true</code> <ul> <li>原字符串本身就是回文串</li> <li>遇到一个不相同的情况，但是<code class="language-plaintext highlighter-rouge">[l + 1, r]</code><strong>或者</strong><code class="language-plaintext highlighter-rouge">[l, r - 1]</code>是回文串</li> </ul> </li> <li>其余情况均返回<code class="language-plaintext highlighter-rouge">false</code></li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">checkPalindrome</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="o">--</span><span class="n">j</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
            
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="nf">validPalindrome</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">){</span>
            <span class="kt">char</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">low</span><span class="p">],</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="p">){</span>
                <span class="n">low</span> <span class="o">++</span><span class="p">;</span>
                <span class="n">high</span> <span class="o">--</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="k">return</span> <span class="n">checkPalindrome</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">checkPalindrome</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250202力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250202力扣每日一题"/><published>2025-02-02T14:03:43+00:00</published><updated>2025-02-02T14:03:43+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<p><img src="/assets/img/screenshot/区间加法2.png" alt=""/></p> <h2 id="解题思路">解题思路</h2> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">maxCount</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">ops</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">mina</span> <span class="o">=</span> <span class="n">m</span><span class="p">,</span> <span class="n">minb</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">op</span><span class="o">:</span> <span class="n">ops</span><span class="p">){</span>
            <span class="n">mina</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">mina</span><span class="p">,</span> <span class="n">op</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
            <span class="n">minb</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">minb</span><span class="p">,</span> <span class="n">op</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">mina</span> <span class="o">*</span> <span class="n">minb</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">第k个数</title><link href="https://blueberrymann.github.io/blog/2025/Hello-world/" rel="alternate" type="text/html" title="第k个数"/><published>2025-01-31T12:00:00+00:00</published><updated>2025-01-31T12:00:00+00:00</updated><id>https://blueberrymann.github.io/blog/2025/Hello-world</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/Hello-world/"><![CDATA[<h1 id="找到第k个数">找到第k个数</h1> <h2 id="一些基本的量">一些基本的量</h2> <ul> <li>$S_l$表示一次分段后左边段中元素的个数</li> <li>$S_r$表示一次分段后右边段中元素的个数 <h2 id="基本原理">基本原理</h2> <ol> <li>当$k \leq S_l$时，只需要递归左边段</li> <li>当$k &gt; S_l$时，只需要递归右边段，寻找第$k - S_l$个数</li> </ol> </li> </ul> <h2 id="小的注意事项">小的注意事项</h2> <ul> <li>在C++中，当局部变量和全局变量重名时，会优先使用局部变量</li> <li>注意哇！在这里面上传blog，代码块需要和上面文本的空一行才可以正常且高亮显示</li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="k">return</span> <span class="n">q</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>

	<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">){</span>
		<span class="k">do</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">);</span>
		<span class="k">do</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="n">sl</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">&lt;=</span> <span class="n">sl</span><span class="p">)</span> <span class="k">return</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
	
	<span class="k">return</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="n">sl</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="p">}</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">quick_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[使用快排的思想寻找数组中第k大的数]]></summary></entry></feed>