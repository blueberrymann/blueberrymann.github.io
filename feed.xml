<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blueberrymann.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blueberrymann.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-23T12:47:25+00:00</updated><id>https://blueberrymann.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">20250223力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250223力扣每日一题"/><published>2025-02-23T01:36:07+00:00</published><updated>2025-02-23T01:36:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8-480.webp 480w,/assets/img/screenshot/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8-800.webp 800w,/assets/img/screenshot/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="设计跳表" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constexpr</span> <span class="kt">int</span> <span class="n">MAX_LEVEL</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">double</span> <span class="n">P_FACTOR</span> <span class="o">=</span> <span class="mf">0.25</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">SkiplistNode</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">SkiplistNode</span> <span class="o">*&gt;</span> <span class="n">forward</span><span class="p">;</span>
    <span class="n">SkiplistNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">_val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_maxLevel</span> <span class="o">=</span> <span class="n">MAX_LEVEL</span><span class="p">)</span> <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="n">_val</span><span class="p">),</span> <span class="n">forward</span><span class="p">(</span><span class="n">_maxLevel</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Skiplist</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">SkiplistNode</span> <span class="o">*</span> <span class="n">head</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">level</span><span class="p">;</span>
    <span class="n">mt19937</span> <span class="n">gen</span><span class="p">{</span><span class="n">random_device</span><span class="p">{}()};</span>
    <span class="n">uniform_real_distribution</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">dis</span><span class="p">;</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">Skiplist</span><span class="p">()</span><span class="o">:</span> <span class="n">head</span><span class="p">(</span><span class="k">new</span> <span class="nf">SkiplistNode</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)),</span> <span class="n">level</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">dis</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">search</span><span class="p">(</span><span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">SkiplistNode</span> <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* 找到第 i 层小于且最接近 target 的元素*/</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="cm">/* 检测当前元素的值是否等于 target */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">curr</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> 
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">SkiplistNode</span> <span class="o">*&gt;</span> <span class="n">update</span><span class="p">(</span><span class="n">MAX_LEVEL</span><span class="p">,</span> <span class="n">head</span><span class="p">);</span>
        <span class="n">SkiplistNode</span> <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* 找到第 i 层小于且最接近 num 的元素*/</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">lv</span> <span class="o">=</span> <span class="n">randomLevel</span><span class="p">();</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">lv</span><span class="p">);</span>
        <span class="n">SkiplistNode</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SkiplistNode</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">lv</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lv</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* 对第 i 层的状态进行更新，将当前元素的 forward 指向新的节点 */</span>
            <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">erase</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">SkiplistNode</span> <span class="o">*&gt;</span> <span class="n">update</span><span class="p">(</span><span class="n">MAX_LEVEL</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">);</span>
        <span class="n">SkiplistNode</span> <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* 找到第 i 层小于且最接近 num 的元素*/</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="cm">/* 如果值不存在则返回 false */</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">curr</span> <span class="o">||</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">!=</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">level</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">curr</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="cm">/* 对第 i 层的状态进行更新，将 forward 指向被删除节点的下一跳 */</span>
            <span class="n">update</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">delete</span> <span class="n">curr</span><span class="p">;</span>
        <span class="cm">/* 更新当前的 level */</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">level</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">[</span><span class="n">level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">level</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">randomLevel</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">lv</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="cm">/* 随机生成 lv */</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">dis</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">P_FACTOR</span> <span class="o">&amp;&amp;</span> <span class="n">lv</span> <span class="o">&lt;</span> <span class="n">MAX_LEVEL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">lv</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">lv</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>



</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><category term="跳表"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250222力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250222力扣每日一题"/><published>2025-02-22T01:36:07+00:00</published><updated>2025-02-22T01:36:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%BB%9F%E8%AE%A1%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE-480.webp 480w,/assets/img/screenshot/%E7%BB%9F%E8%AE%A1%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE-800.webp 800w,/assets/img/screenshot/%E7%BB%9F%E8%AE%A1%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%BB%9F%E8%AE%A1%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="统计相似字符串对的数目" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <h2 id="解题思路">解题思路</h2> <h3 id="我的思路">我的思路</h3> <ul> <li>首先遍历词序列，将每个词中的字母存入哈希集合中。 <ul> <li>因为哈希集合中的元素都是独一无二的，所以我们可以通过每个词对应的哈希集合判断这两个词是不是相似词</li> </ul> </li> <li>使用哈希表存储词下标和词对应的哈希集合的一一对应关心</li> <li>遍历判断两个词对应的哈希集合是否相等 <ul> <li>如果相等，则说明两个词相似</li> <li>如果不相等，则说明两个词不相似</li> </ul> </li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">similarPairs</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">words</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">wordMap</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">wordMap</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="n">i</span><span class="p">,</span> <span class="p">{}});</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">wordMap</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">index</span><span class="p">)){</span>
                    <span class="n">wordMap</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">wordMap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">wordMap</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                    <span class="n">ans</span> <span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><category term="哈希"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250221力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250221力扣每日一题"/><published>2025-02-21T01:36:07+00:00</published><updated>2025-02-21T01:36:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%94%A8%E5%9C%B0%E6%AF%AF%E8%A6%86%E7%9B%96%E5%90%8E%E7%9A%84%E6%9C%80%E5%B0%91%E7%99%BD%E8%89%B2%E7%A0%96%E5%9D%97-480.webp 480w,/assets/img/screenshot/%E7%94%A8%E5%9C%B0%E6%AF%AF%E8%A6%86%E7%9B%96%E5%90%8E%E7%9A%84%E6%9C%80%E5%B0%91%E7%99%BD%E8%89%B2%E7%A0%96%E5%9D%97-800.webp 800w,/assets/img/screenshot/%E7%94%A8%E5%9C%B0%E6%AF%AF%E8%A6%86%E7%9B%96%E5%90%8E%E7%9A%84%E6%9C%80%E5%B0%91%E7%99%BD%E8%89%B2%E7%A0%96%E5%9D%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%94%A8%E5%9C%B0%E6%AF%AF%E8%A6%86%E7%9B%96%E5%90%8E%E7%9A%84%E6%9C%80%E5%B0%91%E7%99%BD%E8%89%B2%E7%A0%96%E5%9D%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="用地毯覆盖后的最少白色砖块" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">constexpr</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">static</code>关键字表示这个常量<code class="language-plaintext highlighter-rouge">INF</code>是静态的；静态成员属于类本身，无论创建多少个类的实例，<code class="language-plaintext highlighter-rouge">INF</code>都只有一个实例，并且可以在类的所有对象中使用</li> <li><code class="language-plaintext highlighter-rouge">constexpr</code>关键字表示这个常量是一个编译时的常量，<code class="language-plaintext highlighter-rouge">INF</code>的值在编译时就已经确定</li> <li><code class="language-plaintext highlighter-rouge">int INF = 0x3f3f3f3f</code>在算法竞赛常被用于“无穷大”的替代值</li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>求地毯无法覆盖的白色方块的最小数量</li> <li>因为不用考虑左侧已铺设的地毯的位置，只需要关注剩余地毯的数量，所以可以考虑使用动态规划</li> <li>动态规划从两个大方向考虑： <ul> <li>状态表示：<code class="language-plaintext highlighter-rouge">d[i][j]</code>表示在前<code class="language-plaintext highlighter-rouge">i</code>个砖块上用了<code class="language-plaintext highlighter-rouge">j</code>块地毯后，最少的剩余的白色方块还有多少 <ul> <li>集合：在前<code class="language-plaintext highlighter-rouge">i</code>个砖块上用了<code class="language-plaintext highlighter-rouge">j</code>块地毯之后，剩余白色方块的数量</li> <li>属性：最小值</li> </ul> </li> <li>状态计算：将<code class="language-plaintext highlighter-rouge">d[i][j]</code>集合进行分类，按照当前方砖是否被地毯覆盖来分类 <ul> <li>当前方砖被地毯覆盖：<code class="language-plaintext highlighter-rouge">d[max(0, i - carpetLen)][j - 1]</code></li> <li>当前方砖未被地毯覆盖：<code class="language-plaintext highlighter-rouge">d[i - 1][j] + (floor[i] == '1')</code> <ul> <li>如果当前方砖为白色砖块，那么就要<code class="language-plaintext highlighter-rouge">++</code></li> </ul> </li> </ul> </li> </ul> </li> <li>获得转移方程</li> </ul> \[d[i][j]=min(d[i - 1][j] + (floor[i] == \text{'1'}),d[i - carpetLen][j - 1])\] <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="k">constexpr</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">minimumWhiteTiles</span><span class="p">(</span><span class="n">string</span> <span class="n">floor</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numCarpets</span><span class="p">,</span> <span class="kt">int</span> <span class="n">carpetLen</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">floor</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">numCarpets</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">INF</span><span class="p">));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">numCarpets</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">floor</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">numCarpets</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">floor</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">);</span>
                <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">carpetLen</span><span class="p">)][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">numCarpets</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><category term="动态规划"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250220力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250220力扣每日一题"/><published>2025-02-20T03:27:07+00:00</published><updated>2025-02-20T03:27:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%A5%87%E5%81%B6%E4%BD%8D%E6%95%B0-480.webp 480w,/assets/img/screenshot/%E5%A5%87%E5%81%B6%E4%BD%8D%E6%95%B0-800.webp 800w,/assets/img/screenshot/%E5%A5%87%E5%81%B6%E4%BD%8D%E6%95%B0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%A5%87%E5%81%B6%E4%BD%8D%E6%95%B0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="奇偶位数" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>位运算符<code class="language-plaintext highlighter-rouge">&amp;</code>：可以用来判断一个数的奇偶性； <ul> <li>如果<code class="language-plaintext highlighter-rouge">n &amp; 1</code>的结果是<code class="language-plaintext highlighter-rouge">1</code>，那么这个数就是奇数；结果为<code class="language-plaintext highlighter-rouge">0</code>，那么这个数就是偶数</li> </ul> </li> <li>异或运算符<code class="language-plaintext highlighter-rouge">^</code>：可以让一个变量的值在<code class="language-plaintext highlighter-rouge">0</code>和<code class="language-plaintext highlighter-rouge">1</code>之间交替变化</li> </ul> <h2 id="解题思路">解题思路</h2> <h3 id="题解思路">题解思路</h3> <ul> <li>初始化变量<code class="language-plaintext highlighter-rouge">i</code>用来表示当前数位是奇数位还是偶数位</li> <li>当前数位如果为1，就在数组对应下标<code class="language-plaintext highlighter-rouge">+1</code></li> </ul> <h3 id="我的思路">我的思路</h3> <ul> <li>模拟</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="题解代码">题解代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">evenOddBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">i</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">evenOddBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
            <span class="n">t</span><span class="p">.</span><span class="n">push_back</span><span class="p">((</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span><span class="p">));</span>
            <span class="n">n</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">even</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">odd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="c1">// even是偶数，odd是奇数</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="n">even</span> <span class="o">++</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">odd</span> <span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">even</span><span class="p">,</span> <span class="n">odd</span><span class="p">};</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><category term="位运算"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">面向语义的数据质量评价方法</title><link href="https://blueberrymann.github.io/blog/2025/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95/" rel="alternate" type="text/html" title="面向语义的数据质量评价方法"/><published>2025-02-19T07:52:45+00:00</published><updated>2025-02-19T07:52:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95/"><![CDATA[<h1 id="对齐度">对齐度</h1> <h1 id="重叠度">重叠度</h1> <h2 id="deduplicating-training-data-makes-language-models-better">Deduplicating Training Data Makes Language Models Better</h2> <h3 id="n-gram">n-gram</h3> <ul> <li>一个n-gram就是</li> </ul> <h3 id="jaccard系数">Jaccard系数</h3> <h3 id="minhash">MinHash</h3> <h1 id="困惑度">困惑度</h1> <h1 id="多样性">多样性</h1> <h2 id="beyond-scale-the-diversity-coefficient-as-a-data-quality-metric-for-variability-in-natural-language-data">Beyond Scale: The Diversity Coefficient as a Data Quality Metric for Variability in Natural Language Data</h2> <h3 id="摘要">摘要</h3> <ul> <li>提出了一种让数据的variability形式化的度量方法 —— <strong>Diversity Coefficient</strong></li> <li>经过大量数据分析，论文证明了当数据集中概念标签增加时，<strong>Diversity Coefficient</strong>也增加。可以正确反映与我们直观感受上多样性变化</li> <li>经过试验验证，<strong>Diversity Coefficient</strong>可以描述下游模型评估性能的有用方面</li> </ul> <h3 id="method-the-diversity-coefficient-for-natural-language">Method: the Diversity Coefficient for Natural Language</h3> <h4 id="知识点补充">知识点补充</h4> <ul> <li><code class="language-plaintext highlighter-rouge">Task2Vec</code>:</li> </ul> <h4 id="1-computing-task2vec-embeddings-for-text">1. Computing Task2Vec Embeddings For Text</h4> <ul> <li>Task2Vec嵌入向量；</li> </ul> <h4 id="2">2.</h4> <h4 id="3">3.</h4>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[在2025.02.19之前，我查找了一些关于数据质量评价方法的资料，但是感觉都是一些“方法”，并不像NLP中的那些有具体的数学公式。此次进一步调研，旨在找到像困惑度，对齐度，重叠度等量化指标以及衡量它们的最新方法]]></summary></entry><entry><title type="html">20250219力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250219力扣每日一题"/><published>2025-02-19T02:27:07+00:00</published><updated>2025-02-19T02:27:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB-480.webp 480w,/assets/img/screenshot/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB-800.webp 800w,/assets/img/screenshot/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="数组列表中的最大距离" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">abs()</code>函数：用来计算一个数的绝对值</li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>由于给定的数组都是有序的，所以每个数组<code class="language-plaintext highlighter-rouge">i</code>的第一个元素<code class="language-plaintext highlighter-rouge">i[0]</code>都是该数组最小的元素，最后一个元素<code class="language-plaintext highlighter-rouge">i[i.size() - 1]</code>都是该数组最大的元素</li> <li>给定计算的最大距离的两个端点应该来自不同的数组，给定数组<code class="language-plaintext highlighter-rouge">a</code>和<code class="language-plaintext highlighter-rouge">b</code>，那么最大距离应该在<code class="language-plaintext highlighter-rouge">a[a.size() - 1] - b[0]</code>和<code class="language-plaintext highlighter-rouge">b[b.size() - 1] - a[0]</code>中出现。但是，遍历所有数组的时间复杂度容易造成超时</li> <li>考虑<strong>单次扫描</strong>数组，并跟踪更新目前为止找到的最小值点<code class="language-plaintext highlighter-rouge">min_val</code>和最大值点<code class="language-plaintext highlighter-rouge">max_val</code>，这些极值点可以被视为目前所有已经遍历过的数组的极值点</li> <li>对于一个新遍历到的数组<code class="language-plaintext highlighter-rouge">a</code>，我们可以将<code class="language-plaintext highlighter-rouge">a[n - 1] - min_value</code>与<code class="language-plaintext highlighter-rouge">max_value - a[0]</code>中的最大值与<code class="language-plaintext highlighter-rouge">res</code>进行比较，更新最大距离，并更新<code class="language-plaintext highlighter-rouge">min_value</code>和<code class="language-plaintext highlighter-rouge">max_value</code></li> <li>遍历结束后，返回<code class="language-plaintext highlighter-rouge">res</code></li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">maxDistance</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">arrays</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arrays</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">min_val</span> <span class="o">=</span> <span class="n">arrays</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">max_val</span> <span class="o">=</span> <span class="n">arrays</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrays</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">arrays</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">arrays</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">min_val</span><span class="p">),</span>
                               <span class="n">abs</span><span class="p">(</span><span class="n">max_val</span> <span class="o">-</span> <span class="n">arrays</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])));</span>
            <span class="n">min_val</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span> <span class="n">arrays</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
            <span class="n">max_val</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">max_val</span><span class="p">,</span> <span class="n">arrays</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">动态规划</title><link href="https://blueberrymann.github.io/blog/2025/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/" rel="alternate" type="text/html" title="动态规划"/><published>2025-02-18T12:52:45+00:00</published><updated>2025-02-18T12:52:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"><![CDATA[<h1 id="线性dp">线性DP</h1> <h2 id="最长上升子序列">最长上升子序列</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长上升子序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="解题思路">解题思路</h3> <ul> <li>动态规划： <ul> <li>状态表示：<code class="language-plaintext highlighter-rouge">f[i]</code>表示以第<code class="language-plaintext highlighter-rouge">i</code>个数字为结尾的最大长度 <ul> <li>集合：所以以第<code class="language-plaintext highlighter-rouge">i</code>个数结尾的上升子序列</li> <li>属性：集合里面每一个上升子序列的长度的<strong>最大值</strong></li> </ul> </li> <li>状态计算：将<code class="language-plaintext highlighter-rouge">f[i]</code>集合进行分类，以倒数第二个数的位置进行分类 <ol> <li>序列中只有一个数</li> <li>倒数第二个数是序列的第$1$个数</li> <li>倒数第二个数是序列的第$2$个数</li> <li>……</li> <li>倒数第二个数是序列的第$i-1$个数 <ul> <li>公式：$f(i)=max(f(j) + 1),j=0,1,2,3,…,i-1,a$</li> </ul> </li> </ol> </li> </ul> </li> </ul> <h3 id="实现代码">实现代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">1100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>

    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>


    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 只有a[i]一个数</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>


    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="最长上升子序列ii">最长上升子序列II</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长上升子序列II" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="知识点">知识点</h3> <h3 id="解题思路-1">解题思路</h3> <ul> <li>某一元素前，存储所有不同长度的上升子序列的最后一个元素的最小值</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-%E7%A4%BA%E6%84%8F%E5%9B%BE-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-%E7%A4%BA%E6%84%8F%E5%9B%BE-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-%E7%A4%BA%E6%84%8F%E5%9B%BE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97II-%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长上升子序列II-示意图" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>如上图所示，所有各种长度的上升子序列的最后元素的最小值排列在一起，应该是严格递增的</li> <li>证明： <ul> <li>假设：长度为6的上升子序列的最后一个元素的最小值为$x$，长度为5的上升子序列的最后一个元素的最小值为$y$，并且$x \leq y$</li> <li>那么，长度为6的上升子序列的倒数第二个元素$z$一定小于$y$</li> <li>但是，$z &lt; y$与事实$y$是长度为5的上升子序列的最后一个元素是最小值相违背</li> <li>所以假设为假，$x &gt; y$为真，整个序列一定是单调递增的</li> </ul> </li> </ul> <h3 id="实现代码-1">实现代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="c1">// a[N]用来存储数字</span>
<span class="c1">// q[N]用来存储不同长度的上升子序列的最后一个元素的最小值</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>

    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

    <span class="c1">// 存入数组</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>


    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="c1">// 利用二分法，对q[N]进行更新</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// 当前a[i]插入的位置+1（即最后一个数字为a[i]的上升子序列的长度）</span>
        <span class="c1">// 和之前算出来的最长上升子序列长度</span>
        <span class="c1">// 进行比较并更新最长上升子序列长度</span>
        <span class="n">len</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">len</span><span class="p">,</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

        <span class="c1">// 将a[i]元素插入到对应位置，即更新某一长度的上升子序列的最后一个元素的最小值</span>
        <span class="n">q</span><span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 输出答案</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">len</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="最长公共子序列">最长公共子序列</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长公共子序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="知识点-1">知识点</h3> <h3 id="解题思路-2">解题思路</h3> <ul> <li>求A和B所有的公共子序列的长度的最大值</li> <li>动态规划（闫氏DP分析法） <ul> <li>状态表示：<code class="language-plaintext highlighter-rouge">f[i][j]</code> <ul> <li>集合：所有<code class="language-plaintext highlighter-rouge">A[1] ~ A[i]</code>和<code class="language-plaintext highlighter-rouge">B[1] ~ B[j]</code>的公共子序列的集合</li> <li>属性：最大值</li> </ul> </li> <li>状态计算：通过<code class="language-plaintext highlighter-rouge">a[i]</code>和<code class="language-plaintext highlighter-rouge">b[j]</code>字符在不在这个子序列 <ul> <li><code class="language-plaintext highlighter-rouge">00</code>：<code class="language-plaintext highlighter-rouge">a[i]</code>和<code class="language-plaintext highlighter-rouge">b[j]</code>都不包含 <ul> <li>那么公共子序列应该在<code class="language-plaintext highlighter-rouge">A[1] ~ A[i - 1]</code>和<code class="language-plaintext highlighter-rouge">B[1] ~ B[j - 1]</code>中求得</li> <li>对于这种情况，<strong><code class="language-plaintext highlighter-rouge">f[i][j] = f[i - 1][j - 1]</code></strong></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">01</code>：不包含<code class="language-plaintext highlighter-rouge">a[i]</code>，只包含<code class="language-plaintext highlighter-rouge">b[j]</code> <ul> <li><strong>我们可以发现这种情况比较难表示</strong></li> <li>因为<code class="language-plaintext highlighter-rouge">f[i - 1][j]</code>不一定包含<code class="language-plaintext highlighter-rouge">b[j]</code>，但是在求最大值的过程中，我们重复表示也是无所谓的</li> <li>因为<code class="language-plaintext highlighter-rouge">f[i - 1][j]</code>中不包含<code class="language-plaintext highlighter-rouge">b[j]</code>的情况会被包含在其他情况中，不会影响最大值的计算</li> <li>对于这种情况，<code class="language-plaintext highlighter-rouge">f[i][j] = f[i - 1][j]</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">10</code>：不包含<code class="language-plaintext highlighter-rouge">b[j]</code>，只包含<code class="language-plaintext highlighter-rouge">a[i]</code> <ul> <li><strong>我们可以发现这种情况比较难表示</strong></li> <li>因为<code class="language-plaintext highlighter-rouge">f[i][j - 1]</code>不一定包含<code class="language-plaintext highlighter-rouge">a[i]</code>，但是在求最大值的过程中，我们重复表示也是无所谓的</li> <li>因为<code class="language-plaintext highlighter-rouge">f[i][j - 1]</code>中不包含<code class="language-plaintext highlighter-rouge">a[i]</code>的情况会被包含在其他情况中，不会影响最大值的计算</li> <li>对于这种情况，<code class="language-plaintext highlighter-rouge">f[i][j] = f[i][j - 1]</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">11</code>：<code class="language-plaintext highlighter-rouge">a[i]</code>和<code class="language-plaintext highlighter-rouge">b[j]</code>都包含 <ul> <li>只有<code class="language-plaintext highlighter-rouge">a[i] == b[j]</code>时，才可能出现这种情况</li> <li>此时，我们如果不考虑<code class="language-plaintext highlighter-rouge">a[i]</code>和<code class="language-plaintext highlighter-rouge">b[j]</code>，那么<code class="language-plaintext highlighter-rouge">A[1] ~ A[i - 1]</code>和<code class="language-plaintext highlighter-rouge">B[1] ~ B[j - 1]</code>中的解就是<code class="language-plaintext highlighter-rouge">f[i - 1][j - 1]</code></li> <li>对于这种情况，<strong><code class="language-plaintext highlighter-rouge">f[i][j] = f[i - 1][j - 1] + 1</code></strong></li> </ul> </li> </ul> </li> <li>在这道题中，因为是求最大值，所以重复无所谓，只保证不遗漏就可以</li> <li>综上，<code class="language-plaintext highlighter-rouge">f[i][j] = max(f[i - 1][j], max(f[i][j - 1], f[i - 1][j - 1] + 1))</code></li> </ul> </li> </ul> <h3 id="实现代码-2">实现代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">1100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>


    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><category term="动态规划"/><summary type="html"><![CDATA[学习动态规划思想和板子]]></summary></entry><entry><title type="html">20250218力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250218力扣每日一题"/><published>2025-02-18T02:22:07+00:00</published><updated>2025-02-18T02:22:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-480.webp 480w,/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-800.webp 800w,/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="区间内查询数字的概率" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">c++</code>中<code class="language-plaintext highlighter-rouge">vector</code>的<code class="language-plaintext highlighter-rouge">lower_bound</code>和<code class="language-plaintext highlighter-rouge">upper_bound</code>操作： <ul> <li><code class="language-plaintext highlighter-rouge">lower_bound</code> <ul> <li>传入的参数：查找范围初始点的迭代器，查找范围结束点的迭代器，待查找的目标值</li> <li>返回值：返回指向第一个<strong>大于等于</strong>目标值的元素的迭代器</li> <li>用法：<code class="language-plaintext highlighter-rouge">auto l = lower_bound(pos.begin(), pos.end(), value)</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">upper_bound</code> <ul> <li>传入的参数：查找范围初始点的迭代器，查找范围结束点的迭代器，待查找的目标值</li> <li>返回值：返回指向第一个<strong>大于</strong>目标值的元素的迭代器</li> <li>用法：<code class="language-plaintext highlighter-rouge">auto r = upper_bound(pos.begin(), pos.end(), value)</code></li> </ul> </li> <li>如果没有查找到目标值，那么两个操作返回的内容均为<code class="language-plaintext highlighter-rouge">pos.end()</code></li> </ul> </li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>每次查询的过程分为两步 <ol> <li>得到目标数<code class="language-plaintext highlighter-rouge">value</code>在数组<code class="language-plaintext highlighter-rouge">arr</code>中的所有下标</li> <li>在这些下标中计算位于闭区间的<code class="language-plaintext highlighter-rouge">[left, right]</code>的下标个数并返回</li> </ol> </li> <li>由于<code class="language-plaintext highlighter-rouge">arr</code>初始化后就不在变化，可以构建以<code class="language-plaintext highlighter-rouge">arr</code>中元素值为键，值的对应下标数组为值的哈希表，来存储数组中的信息</li> <li>构建哈希表时，我们顺序遍历<code class="language-plaintext highlighter-rouge">arr</code>数组，这样保证了每个键对应的下标数组都是有序的</li> <li>查找时，根据传入的参数中的<code class="language-plaintext highlighter-rouge">value</code>找到对应的下标数组 <ul> <li>首先查找第一个大于等于<code class="language-plaintext highlighter-rouge">left</code>的下标的迭代器<code class="language-plaintext highlighter-rouge">l</code>位置</li> <li>其次查找第一个大于<code class="language-plaintext highlighter-rouge">right</code>的下标的迭代器<code class="language-plaintext highlighter-rouge">r</code>位置</li> </ul> </li> <li>返回<code class="language-plaintext highlighter-rouge">r - l</code>，即为答案</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="题解代码">题解代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RangeFreqQuery</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">occurence</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="n">RangeFreqQuery</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
            <span class="n">occurence</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">query</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">pos</span> <span class="o">=</span> <span class="n">occurence</span><span class="p">[</span><span class="n">value</span><span class="p">];</span>

        <span class="k">auto</span> <span class="n">l</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pos</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">left</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">r</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pos</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">right</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * Your RangeFreqQuery object will be instantiated and called as such:
 * RangeFreqQuery* obj = new RangeFreqQuery(arr);
 * int param_1 = obj-&gt;query(left,right,value);
 */</span>
</code></pre></div></div> <h3 id="我的代码超时了无敌了炸了">我的代码（超时了，无敌了，炸了）</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RangeFreqQuery</span> <span class="p">{</span>
<span class="nl">private:</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="n">RangeFreqQuery</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">query</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">subnums</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">left</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">subnums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">subnums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">subnums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">subnums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">value</span><span class="p">)</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">index_1</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">subnums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">subnums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">index_2</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">index_2</span> <span class="o">-</span> <span class="n">index_1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * Your RangeFreqQuery object will be instantiated and called as such:
 * RangeFreqQuery* obj = new RangeFreqQuery(arr);
 * int param_1 = obj-&gt;query(left,right,value);
 */</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250217力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250217力扣每日一题"/><published>2025-02-17T02:21:07+00:00</published><updated>2025-02-17T02:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有序数组中出现次数超过25%的元素" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>无</li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>定义一个<code class="language-plaintext highlighter-rouge">cnt</code>变量，记录与当前元素在数组中共有多少个</li> <li>当遇到不一样的变量时，<code class="language-plaintext highlighter-rouge">cnt</code>归零，重新开始记录</li> <li>每次<code class="language-plaintext highlighter-rouge">cnt</code>更新之后，判断<code class="language-plaintext highlighter-rouge">cnt * 4</code>与<code class="language-plaintext highlighter-rouge">arr.size()</code>的大小。</li> <li>由题意可知，数组内只存在一个符合条件的元素，所以当<code class="language-plaintext highlighter-rouge">cnt * 4 &gt; arr.size()</code>时，直接返回当前元素</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">findSpecialInteger</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span>  <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">target</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">4</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">cnt</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250215力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250215力扣每日一题"/><published>2025-02-16T12:21:07+00:00</published><updated>2025-02-16T12:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-480.webp 480w,/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-800.webp 800w,/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="球会落何处" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <h2 id="解题思路">解题思路</h2> <ul> <li><strong>模拟</strong></li> <li>当球进入一个格子内的时候，有两种情况： <ul> <li>格子的挡板可以把球向右推，即该格内的数值为1 <ul> <li>如果右侧的格子挡板为-1，或者右侧为边界时，此时球无法继续下落，可以中止循环</li> <li>如果右侧的格子挡板为1，此时球可以下落</li> </ul> </li> <li>格子的挡板可以把球左推，即该格内的数值为-1 <ul> <li>如果左侧的格子挡板为1，或者左侧为边界，此时球无法继续下落，可以中止循环</li> <li>如果右侧的格子挡板为-1，此时球可以下落</li> </ul> </li> </ul> </li> <li>循环执行上述模拟步骤，直至到达最底层</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">findBall</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">row</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">else</span>
                        <span class="n">col</span> <span class="o">++</span><span class="p">;</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">else</span>
                        <span class="n">col</span> <span class="o">--</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// falling to the ground</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry></feed>