<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blueberrymann.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blueberrymann.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-16T13:31:32+00:00</updated><id>https://blueberrymann.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">20250216力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250216力扣每日一题"/><published>2025-02-16T12:21:07+00:00</published><updated>2025-02-16T12:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-480.webp 480w,/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-800.webp 800w,/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="将每个元素替换为右侧最大元素" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>无</li> </ul> <h2 id="解题思路">解题思路</h2> <h3 id="题解思路">题解思路</h3> <ul> <li>逆向遍历数组，定义一个新数组用来存储赋值后的数组</li> <li>从后遍历数组 <ul> <li>最后一个元素的值为<code class="language-plaintext highlighter-rouge">-1</code></li> <li>前面的所有元素的值为<code class="language-plaintext highlighter-rouge">ans[i] = max(ans[i + 1], arr[i + 1])</code>，这样的方法当在<code class="language-plaintext highlighter-rouge">arr</code>数组中遇到更大的元素之后，可以及时的更新</li> </ul> </li> </ul> <h4 id="我的思路">我的思路</h4> <ul> <li>正向遍历数组，定义两个指针<code class="language-plaintext highlighter-rouge">i</code>和<code class="language-plaintext highlighter-rouge">j</code>，<code class="language-plaintext highlighter-rouge">i</code>用来指向当前已遍历到的元素</li> <li>从<code class="language-plaintext highlighter-rouge">i + 1</code>到数组末尾的范围内查找最大元素<code class="language-plaintext highlighter-rouge">val</code>，并将其下标存入<code class="language-plaintext highlighter-rouge">index</code>内 <ul> <li>事实证明，如果从<code class="language-plaintext highlighter-rouge">i</code>开始找，如果找到的元素是数组中最大的元素，那么会陷入死循环</li> </ul> </li> <li>从<code class="language-plaintext highlighter-rouge">i</code>到<code class="language-plaintext highlighter-rouge">index</code>，将所有的值赋值为<code class="language-plaintext highlighter-rouge">val</code></li> <li>重复上述过程</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="题解代码">题解代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">replaceElements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
        <span class="n">ans</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
            <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">replaceElements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">max_element</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">it</span> <span class="o">-</span> <span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"test1"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">arr</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">二分（hot100 &amp;amp; acwing &amp;amp; 个人总结）</title><link href="https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86/" rel="alternate" type="text/html" title="二分（hot100 &amp;amp; acwing &amp;amp; 个人总结）"/><published>2025-02-14T02:46:45+00:00</published><updated>2025-02-14T02:46:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86/"><![CDATA[<h1 id="前言">前言</h1> <ul> <li>被这个二分查找折磨得实在是不成样子了，感觉题目很难想出来，题目即使ac了也感觉莫名奇妙的</li> </ul> <h1 id="思想">思想</h1> <h2 id="整数二分">整数二分</h2> <ul> <li>整数二分的本质：给定一个性质，将一个区间划分为<strong>满足该性质</strong>和<strong>不满足该性质</strong>的两个区间，通过二分可以查找到<strong>区间的边界</strong>。如图所示，下图的红绿边界的端点都可以被找到，对应不同的模版</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-480.webp 480w,/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-800.webp 800w,/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="整数二分的示意图" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="寻找红色边界端点">寻找红色边界端点</h3> <ul> <li>初始化<code class="language-plaintext highlighter-rouge">l = 0, r = vec.size(), mid = (l + r + 1) / 2</code></li> </ul> \[mid = \frac{l+r+1}{2}\] <ul> <li>判断<code class="language-plaintext highlighter-rouge">mid</code>指向的元素是否符合红色区域性质 <ul> <li>如果符合，则说明红色区间端点位于<code class="language-plaintext highlighter-rouge">[mid, r]</code>，更新<code class="language-plaintext highlighter-rouge">l = mid</code></li> <li>如果不符合，则说明红色区间端点位于<code class="language-plaintext highlighter-rouge">[l, mid - 1]</code>，更新<code class="language-plaintext highlighter-rouge">r = mid - 1</code></li> </ul> </li> </ul> <h4 id="为什么要-1呢">为什么要<code class="language-plaintext highlighter-rouge">+ 1</code>呢？</h4> <ul> <li>当<code class="language-plaintext highlighter-rouge">l = r - 1</code>时，<code class="language-plaintext highlighter-rouge">mid = (l + r) / 2</code>的计算结果为<code class="language-plaintext highlighter-rouge">(l+r)/2 = (r-1+r)/2 = r-1 = l</code></li> <li>此时，若<code class="language-plaintext highlighter-rouge">check(mid)</code>返回<code class="language-plaintext highlighter-rouge">true</code>，则将进入死循环</li> <li>当<code class="language-plaintext highlighter-rouge">+ 1</code>之后，<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2 = r</code>，更新后<code class="language-plaintext highlighter-rouge">l = r</code>，可以中止循环</li> </ul> <h3 id="寻找绿色边界端点">寻找绿色边界端点</h3> <ul> <li>初始化<code class="language-plaintext highlighter-rouge">mid = (l + r) / 2</code> \(mid =\frac{l+r}{2}\)</li> <li>判断<code class="language-plaintext highlighter-rouge">mid</code>指向的元素是否满足绿色区域性质 <ul> <li>如果符合，则说明绿色边界端点位于<code class="language-plaintext highlighter-rouge">[l, mid]</code>之间，更新<code class="language-plaintext highlighter-rouge">r = mid</code></li> <li>如果不符合，则说明绿色边界端点位于<code class="language-plaintext highlighter-rouge">[mid + 1, r]</code>， 更新<code class="language-plaintext highlighter-rouge">r = mid + 1</code></li> </ul> </li> </ul> <h3 id="解题心路历程">解题心路历程</h3> <ul> <li>写一个<code class="language-plaintext highlighter-rouge">check</code>函数</li> <li>根据<code class="language-plaintext highlighter-rouge">check</code>函数中定义的要获取哪个区间的端点，来确定<code class="language-plaintext highlighter-rouge">mid</code>是否需要<code class="language-plaintext highlighter-rouge">+ 1</code> <ul> <li>如果寻找的是红色区间端点，那么就需要<code class="language-plaintext highlighter-rouge">+ 1</code></li> <li>如果寻找的是绿色区间端点，那么就不需要<code class="language-plaintext highlighter-rouge">+ 1</code></li> </ul> </li> </ul> <h1 id="模版">模版</h1> <h2 id="寻找红色边界端点-1">寻找红色边界端点</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="为什么l一定能等于r">为什么l一定能等于r</h3> <ul> <li>假设<code class="language-plaintext highlighter-rouge">l = r - 1</code>，那么<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2 = r</code></li> <li>两种更新方式： <ul> <li><code class="language-plaintext highlighter-rouge">l = mid</code>: 那么<code class="language-plaintext highlighter-rouge">l = r</code></li> <li><code class="language-plaintext highlighter-rouge">r = mid - 1</code>: 那么<code class="language-plaintext highlighter-rouge">r = r - 1 = l</code></li> </ul> </li> </ul> <h3 id="为什么l--r循环中止的时候l指向的元素一定是端点">为什么<code class="language-plaintext highlighter-rouge">l == r</code>（循环中止的时候），l指向的元素一定是端点</h3> <ul> <li>证明$\text{nums}[l]\leq \text{target}, \text{nums}[r+1] &gt; target$</li> <li>假设在第k次循环中，$\text{nums}[l]\leq \text{target}, \text{nums}[r+1] &gt; target$成立 <ul> <li>如果$\text{nums}[mid] \leq \text{target}$，那么$l = mid$ <ul> <li>对于$\text{nums}[l]\leq \text{target}$：$\text{nums}[l] = \text{nums}[mid]\leq \text{target}$，依旧成立</li> <li>对于$\text{nums}[r+1] &gt; target$：$r$没变，依旧成立</li> </ul> </li> <li>如果$\text{nums}[mid] &gt; \text{target}$，那么$r = mid - 1$ <ul> <li>对于$\text{nums}[l]\leq \text{target}$：$l$没变，依旧成立</li> <li>对于$\text{nums}[r+1] &gt; \text{target}$：$\text{nums}[r+1] = \text{nums}[mid]&gt;\text{target}$，依旧成立</li> </ul> </li> </ul> </li> <li>在循环中止时，$l = r$，此时$\text{nums}[l]\leq \text{target},\text{nums}[r+1]=\text{nums}[l+1]&gt;\text{target}$，所以$l$就是所求区间的端点</li> </ul> <h2 id="寻找绿色边界端点-1">寻找绿色边界端点</h2> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="为什么l一定能等于r-1">为什么l一定能等于r</h3> <ul> <li>假设<code class="language-plaintext highlighter-rouge">l = r - 1</code>，此时<code class="language-plaintext highlighter-rouge">mid = (l + l + 1) / 2 = l</code></li> <li>两种更新方式： <ul> <li><code class="language-plaintext highlighter-rouge">r = mid</code>: 那么<code class="language-plaintext highlighter-rouge">r = mid = l</code></li> <li><code class="language-plaintext highlighter-rouge">l = mid + 1</code>: 那么<code class="language-plaintext highlighter-rouge">l = l + 1 = r</code></li> </ul> </li> </ul> <h3 id="为什么l--r循环中止的时候l指向的元素一定是端点-1">为什么<code class="language-plaintext highlighter-rouge">l == r</code>（循环中止的时候），l指向的元素一定是端点</h3> <ul> <li>证明<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target（l &gt; 0）, nums[r] &gt;= target</code></li> <li>初始 <ul> <li>两个条件一定符合</li> </ul> </li> <li>循环中 <ul> <li>假设对于第k次 <ul> <li><code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target</code>成立 <ul> <li>在第<code class="language-plaintext highlighter-rouge">k + 1</code>次中，如果更新<code class="language-plaintext highlighter-rouge">r</code>，那么<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target</code>依旧成立;如果更新<code class="language-plaintext highlighter-rouge">l</code>，那么说明<code class="language-plaintext highlighter-rouge">nums[mid] &lt; target</code>，此时<code class="language-plaintext highlighter-rouge">l - 1 = mid</code>，所以<code class="language-plaintext highlighter-rouge">nums[l - 1] = nums[mid] &lt; target</code></li> <li>得证</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">nums[r] &gt;= target</code>成立 <ul> <li>如果更新<code class="language-plaintext highlighter-rouge">l</code>，那么依旧成立；如果更新<code class="language-plaintext highlighter-rouge">r</code>， <code class="language-plaintext highlighter-rouge">r = mid</code>， <code class="language-plaintext highlighter-rouge">nums[r] = nums[mid] &gt;= target</code></li> <li>得证</li> </ul> </li> </ul> </li> </ul> </li> <li>循环结束时，由于前面的证明，我们知道<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target, nums[r] &gt;= target</code>，由于<code class="language-plaintext highlighter-rouge">l = r</code>，那么<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target, nums[l] &gt;= target</code></li> <li>综上，我们可以说<code class="language-plaintext highlighter-rouge">l</code>指向的元素就是我们查找的红色区间的端点</li> </ul> <h1 id="刷题">刷题</h1> <h2 id="leetcode">LeetCode</h2> <h3 id="搜索二维矩阵">搜索二维矩阵</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-480.webp 480w,/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-800.webp 800w,/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="搜索二维矩阵" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="知识点">知识点</h4> <h4 id="解题思路">解题思路</h4> <ul> <li>首先确定要划分的左右区间，左边区间为<code class="language-plaintext highlighter-rouge">&lt;= target</code>，右边区间为<code class="language-plaintext highlighter-rouge">&gt; target</code></li> <li>我们要寻找的就是左侧区间端点，只有左侧区间端点才有可能等于<code class="language-plaintext highlighter-rouge">target</code>，如果端点不等于，那么该矩阵中就没有<code class="language-plaintext highlighter-rouge">target</code></li> <li>根据分析，此时<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2</code>，经过一系列迭代后，<code class="language-plaintext highlighter-rouge">l == r</code>退出循环</li> <li>返回<code class="language-plaintext highlighter-rouge">l</code>，即为端点值</li> </ul> <h4 id="实现代码">实现代码</h4> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">searchMatrix</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">matrix</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>

        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">mid</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">l</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>


        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">][</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">][</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="参考资料链接">参考资料链接</h1> <ul> <li><a href="https://www.acwing.com/video/231/">AcWing: 二分查找-数的范围课程</a></li> <li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3073/">AcWing: 二分查找算法模板By Yxc</a></li> <li><a href="https://blog.csdn.net/WJPnb1/article/details/126360962?spm=1001.2014.3001.5502">CSDN博客：不需要考虑mid + 1, mid - 1的二分查找模版</a></li> <li><a href="https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d6c2594da70bed6663d829af474e8518">B站视频：二分查找为什么总是写错？</a></li> <li><a href="https://www.acwing.com/solution/content/3338/">AcWing-题解-数的范围（详细分析二分过程）</a></li> </ul> <h1 id="草纸">草纸</h1> <ul> <li>r = l + 1;</li> <li>mid = (l + r) / 2 = (2l + 1) / 2 = l</li> </ul>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><category term="binary-search"/><summary type="html"><![CDATA[学习二分查找思想和板子，总结经验，刷题]]></summary></entry><entry><title type="html">树与图的深度优先遍历</title><link href="https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/" rel="alternate" type="text/html" title="树与图的深度优先遍历"/><published>2025-02-13T09:13:45+00:00</published><updated>2025-02-13T09:13:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-480.webp 480w,/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-800.webp 800w,/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="树的重心" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>dfs</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">st</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">){</span>
    <span class="n">st</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>
    <span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <h2 id="实现代码">实现代码</h2>]]></content><author><name></name></author><category term="learning-notebook"/><category term="DFS"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习树与图的深度优先遍历思想和板子]]></summary></entry><entry><title type="html">20250213力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250213力扣每日一题"/><published>2025-02-13T02:21:07+00:00</published><updated>2025-02-13T02:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-480.webp 480w,/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-800.webp 800w,/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="盒子中小球的最大数量" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <h2 id="解题思路">解题思路</h2> <h2 id="实现代码">实现代码</h2> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">countBalls</span><span class="p">(</span><span class="kt">int</span> <span class="n">lowLimit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">highLimit</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">boxes</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lowLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">highLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
                <span class="n">tmp</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">boxes</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">sum</span><span class="p">)){</span>
                <span class="n">boxes</span><span class="p">[</span><span class="n">sum</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">boxes</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="n">sum</span><span class="p">,</span> <span class="mi">1</span><span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">boxes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">boxes</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">MaxCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ansIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">p</span><span class="o">:</span> <span class="n">ans</span><span class="p">){</span>

            <span class="n">MaxCnt</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">MaxCnt</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">MaxCnt</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="题解中的代码">题解中的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">countBalls</span><span class="p">(</span><span class="kt">int</span> <span class="n">lowLimit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">highLimit</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">cnt</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lowLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">highLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">box</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
                <span class="n">box</span> <span class="o">+=</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">x</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">cnt</span><span class="p">[</span><span class="n">box</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">cnt</span><span class="p">[</span><span class="n">box</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">拓扑排序</title><link href="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="拓扑排序"/><published>2025-02-12T14:13:45+00:00</published><updated>2025-02-12T14:13:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"><![CDATA[<h1 id="有向图的拓扑序列">有向图的拓扑序列</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向图的拓扑序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>只有有向无环图才有拓扑序列</li> <li>拓扑序列：若一个图中所有点构成的序列$A$满足：对于图中每条边$(x,y)$，$x$在$A$中都出现在$y$之前，则称$A$是该图的一个拓扑序列</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向无环图" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>对于上面这个图，它的一个拓扑序列为$1\to 3\to 2\to 4\to 5$</li> <li>度数 <ul> <li>入度：一个点进来的边数</li> <li>出度：一个点出去的边数</li> </ul> </li> <li><strong>证明：一个有向无环图必然存在一个入度为0的点</strong> <ul> <li>使用反证法：假设在这个图中所有的点的入度都大于等于1</li> <li>假设这个图中有$n$个店，那么我们进行$n + 1$次反向查找到上一个端点</li> <li>根据抽屉原理，在这$n + 1$次查找中，必然有两个点是相同的，那么就说明存在着一个环</li> <li>但是<strong>存在环</strong>与<strong>有向无环图</strong>的前提相违背，所以假设不成立</li> <li>综上，<strong>一个有向无环图必然存在一个入度为0的点</strong>得证</li> </ul> </li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向图的邻接表存储结构" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>图的邻接表存储： <ul> <li>邻接表的模拟存储本质上就是<strong>使用多个单链表进行存储</strong></li> <li>使用<code class="language-plaintext highlighter-rouge">h[N]</code>数组存储头结点的信息，<code class="language-plaintext highlighter-rouge">e[N]</code>数组存储有向边的尾部节点，<code class="language-plaintext highlighter-rouge">ne[idx]</code>数组存储该点指向下一节点的指针，请注意：<strong>这里的两个结点都是以<code class="language-plaintext highlighter-rouge">h[i]</code>为头结点的有向边指向的终点结点，这就是一个头插法</strong></li> <li>举一个具体的例子，假设我们要加入一条从<code class="language-plaintext highlighter-rouge">a</code>指向<code class="language-plaintext highlighter-rouge">b</code>的有向边，我们首先初始化端点b，这个端点指向下一节点的指针等于<code class="language-plaintext highlighter-rouge">h[a]</code>,更新<code class="language-plaintext highlighter-rouge">h[a]</code>指向下一节点的指针为<code class="language-plaintext highlighter-rouge">idx</code>，并将<code class="language-plaintext highlighter-rouge">idx ++</code></li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>寻找入度为0的点都可以作为拓扑序列最前面的元素，把所有入度为0的点入队</li> <li>进行BFS <ul> <li>当队列不为空时，将队列头元素出队，设为<code class="language-plaintext highlighter-rouge">t</code></li> <li>依次枚举<code class="language-plaintext highlighter-rouge">t</code>的所有出边$\text{t} \to \text{j}$</li> <li>删掉$\text{t} \to \text{j}$，更新<code class="language-plaintext highlighter-rouge">j</code>的入度<code class="language-plaintext highlighter-rouge">d[j] --</code></li> <li><code class="language-plaintext highlighter-rouge">if(d[j] == 0)</code>，说明<code class="language-plaintext highlighter-rouge">j</code>前面的所有元素都已经遍历完毕，<code class="language-plaintext highlighter-rouge">j</code>可以入队</li> </ul> </li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="y总照抄版">y总照抄版</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">100010</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>


<span class="kt">void</span> <span class="nf">add</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">toposort</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">hh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="n">hh</span> <span class="o">&lt;=</span> <span class="n">tt</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">hh</span> <span class="o">++</span><span class="p">];</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">t</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">--</span> <span class="n">d</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>

        <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">toposort</span><span class="p">())</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="20250213理解了之后重写了一版">20250213理解了之后重写了一版</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">hh</span><span class="p">,</span> <span class="n">tt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">toposort</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="n">tt</span> <span class="o">&gt;=</span> <span class="n">hh</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">hh</span> <span class="o">++</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">--</span> <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">tt</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tt</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
        <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">toposort</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>


<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习拓扑排序思想和板子]]></summary></entry><entry><title type="html">一些有用的终端指令</title><link href="https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/" rel="alternate" type="text/html" title="一些有用的终端指令"/><published>2025-02-12T13:35:07+00:00</published><updated>2025-02-12T13:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/"><![CDATA[<h1 id="个人网站">个人网站</h1> <ul> <li>之前在网站部署时，经常会出现<code class="language-plaintext highlighter-rouge">Prettier code formatter</code>的报错，只需要在push前，运行下面这行指令就可以解决</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nt">--write</span> <span class="nb">.</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="summary"/><category term="terminal"/><category term="code"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">Metrics of Data Quality in LLM</title><link href="https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM/" rel="alternate" type="text/html" title="Metrics of Data Quality in LLM"/><published>2025-02-12T12:35:07+00:00</published><updated>2025-02-12T12:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM/"><![CDATA[<div class="row justify-content-center"> <div class="col-lg-8 col-md-10"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/svg/Data%20Quality%20Metrics%20in%20LLM.svg" sizes="95vw"/> <img src="/assets/img/svg/Data%20Quality%20Metrics%20in%20LLM.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Data Quality Metrics in LLM Mindmap" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row justify-content-center"> <div class="col-lg-8 col-md-10"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Typical_RAG_Architecture-480.webp 480w,/assets/img/Typical_RAG_Architecture-800.webp 800w,/assets/img/Typical_RAG_Architecture-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Typical_RAG_Architecture.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Typical_RAG_Architecutre" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="summary"/><category term="LLM"/><category term="Data-Quality"/><category term="FederatedLearningGroup"/><summary type="html"><![CDATA[目前正在研究LLM中评价数据质量的指标都有什么]]></summary></entry><entry><title type="html">20250212力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250212力扣每日一题"/><published>2025-02-12T03:35:07+00:00</published><updated>2025-02-12T03:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-480.webp 480w,/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-800.webp 800w,/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="袋子里最少数量的球" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>寻找数组中最大的元素 <ul> <li><code class="language-plaintext highlighter-rouge">max_element(nums.begin(), nums.end())</code>返回的是迭代器</li> <li><code class="language-plaintext highlighter-rouge">*</code>操作符解引用了迭代器，直接获取了元素</li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">findMax</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">){</span>
    <span class="n">MaxElement</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">MaxElement</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-480.webp 480w,/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-800.webp 800w,/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="天赐细莲的评论" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>理解题意，将题目中的要求转化为： <ul> <li><strong>给定<code class="language-plaintext highlighter-rouge">maxOperations</code>操作次数，能否可以将单个袋子中球数目的最大值不超过<code class="language-plaintext highlighter-rouge">y</code></strong></li> </ul> </li> <li>假设$y = y_0$满足条件，那么所有$y &gt; y_0$肯定都符合条件，我们要找出一个$y_{optimal}$，使得所有$y \geq y_{optimal}$符合条件，所有$y &lt; y_{optimal}$不符合条件</li> <li>可以考虑使用二分查找$y_{opt}$</li> <li>初始化<code class="language-plaintext highlighter-rouge">left = 1, right = *max_element(nums.begin(), nums.end())</code></li> <li>判断每个袋子中的球数需要的操作数，使用下列公式进行计算，该公式含义为： <ul> <li>当<code class="language-plaintext highlighter-rouge">nums[i] &lt;= y</code>时，操作数为0</li> <li>当<code class="language-plaintext highlighter-rouge">y &lt; nums[i] &lt;= 2y</code>时，操作数为1</li> <li>当<code class="language-plaintext highlighter-rouge">2y &lt; nums[i] &lt;= 3y</code>时，操作数为2</li> <li>……</li> </ul> </li> </ul> \[\left\lfloor \frac{\text{nums}[i] - 1}{y} \right\rfloor\] <ul> <li>遍历<code class="language-plaintext highlighter-rouge">nums</code>中的所有元素，获取预期操作数</li> <li>如果操作数大于<code class="language-plaintext highlighter-rouge">maxOperations</code>，则说明<code class="language-plaintext highlighter-rouge">y</code>较小，<code class="language-plaintext highlighter-rouge">left = y + 1</code>，说明所有小于等于当前<code class="language-plaintext highlighter-rouge">y</code>值都不行</li> <li>如果操作数小于<code class="language-plaintext highlighter-rouge">maxOperations</code>，则说明<code class="language-plaintext highlighter-rouge">y</code>较大，<code class="language-plaintext highlighter-rouge">right = y - 1</code>，我们继续寻找有没有符合条件的更小的<code class="language-plaintext highlighter-rouge">y</code>值</li> <li>直至<code class="language-plaintext highlighter-rouge">left &gt; right</code>，我们获得<code class="language-plaintext highlighter-rouge">y</code>值就是符合这两个条件的</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">minimumSize</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxOperations</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="kt">long</span> <span class="kt">long</span> <span class="n">ops</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">:</span> <span class="n">nums</span><span class="p">){</span>
                <span class="n">ops</span> <span class="o">+=</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">ops</span> <span class="o">&lt;=</span> <span class="n">maxOperations</span><span class="p">){</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">论文生词</title><link href="https://blueberrymann.github.io/blog/2025/%E8%AE%BA%E6%96%87%E7%94%9F%E8%AF%8D/" rel="alternate" type="text/html" title="论文生词"/><published>2025-02-12T03:35:07+00:00</published><updated>2025-02-12T03:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E8%AE%BA%E6%96%87%E7%94%9F%E8%AF%8D</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E8%AE%BA%E6%96%87%E7%94%9F%E8%AF%8D/"><![CDATA[<h1 style="text-align: center;">A</h1> <h1 style="text-align: center;">B</h1> <h1 style="text-align: center;">C</h1> <ul> <li>claim: 陈述，声明</li> </ul> <h1 style="text-align: center;">D</h1> <h1 style="text-align: center;">E</h1> <h1 style="text-align: center;">F</h1> <h1 style="text-align: center;">G</h1> <ul> <li>ground truth: 基准事实，真实标准</li> <li> <h1 style="text-align: center;">H</h1> </li> <li>hallucination: 幻觉；AI系统产生的不准确或者虚构的信息 <ul> <li>机器学习模型评估：研究者会讨论模型输出中的hallucination问题 <ul> <li>The model shows siginificant halluciantion when generating long-form text.</li> <li>该模型在生成长文本时会显示出明显的幻觉现象</li> </ul> </li> </ul> </li> </ul> <h1 style="text-align: center;">I</h1> <ul> <li>interpretability: 可解释性</li> </ul> <h1 style="text-align: center;">J</h1> <h1 style="text-align: center;">K</h1> <h1 style="text-align: center;">L</h1> <h1 style="text-align: center;">M</h1> <h1 style="text-align: center;">N</h1> <h1 style="text-align: center;">O</h1> <h1 style="text-align: center;">P</h1> <ul> <li>pitfall: 陷阱，陷阱坑；隐藏的问题，潜在的风险 <ul> <li>方法学讨论：作者会指出某种研究方法中的pitfalls，提醒读者在采用这种方法时要注意避免这些潜在问题。 <ul> <li>A common pitfall in questionnaire design is the use of leading questions.</li> <li>问卷设计中的一个常见陷阱是使用诱导性问题。</li> </ul> </li> <li>文献综述：作者回顾前人研究时，可能会指出其中的pitfalls，以说明为什么需要新的研究方法或视角。 <ul> <li>Previous studies fell into the pitfall of overlooking cultural differences.</li> <li>先前的研究陷入了忽视文化差异的陷阱。</li> </ul> </li> <li>研究建议：论文结尾处，作者可能会提醒未来研究者要注意避免某些pitfalls。 <ul> <li>Future researchers should be aware of these potential pitfalls when replicating this study</li> <li>未来的研究者在重复这项研究时应该注意这些潜在的陷阱。</li> </ul> </li> </ul> </li> </ul> <h1 style="text-align: center;">Q</h1> <h1 style="text-align: center;">R</h1> <ul> <li>rectify: 修正</li> <li>remedial: 补救</li> </ul> <h1 style="text-align: center;">S</h1> <h1 style="text-align: center;">T</h1> <h1 style="text-align: center;">U</h1> <h1 style="text-align: center;">V</h1> <h1 style="text-align: center;">W</h1> <h1 style="text-align: center;">X</h1> <h1 style="text-align: center;">Y</h1> <h1 style="text-align: center;">Z</h1>]]></content><author><name></name></author><category term="summary"/><category term="essay"/><category term="english"/><category term="academic-skills"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">hot100系列——哈希</title><link href="https://blueberrymann.github.io/blog/2025/hot100-hash/" rel="alternate" type="text/html" title="hot100系列——哈希"/><published>2025-02-11T03:56:07+00:00</published><updated>2025-02-11T03:56:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/hot100-hash</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/hot100-hash/"><![CDATA[<h1 id="两数之和">两数之和</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-480.webp 480w,/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-800.webp 800w,/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="两数之和" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">unordered_map</code>有<code class="language-plaintext highlighter-rouge">find</code>操作，传入待查询的<code class="language-plaintext highlighter-rouge">key</code>值 <ul> <li>如果有对应<code class="language-plaintext highlighter-rouge">key</code>值，则返回位于该位置的迭代器；</li> <li>如果没有对应<code class="language-plaintext highlighter-rouge">key</code>值，则返回<code class="language-plaintext highlighter-rouge">unordered_map::end()</code>迭代器</li> </ul> </li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>首先初始化一个<code class="language-plaintext highlighter-rouge">unordered_map</code>，<code class="language-plaintext highlighter-rouge">nums</code>中的元素作为<code class="language-plaintext highlighter-rouge">key</code>，每个元素的下标作为<code class="language-plaintext highlighter-rouge">value</code></li> <li>遍历<code class="language-plaintext highlighter-rouge">nums</code>数组中的每一个元素<code class="language-plaintext highlighter-rouge">num</code> <ul> <li>如果<code class="language-plaintext highlighter-rouge">unorder_map</code>找到<code class="language-plaintext highlighter-rouge">target - num</code>，则返回对应的下标和<code class="language-plaintext highlighter-rouge">num</code>对应下标<code class="language-plaintext highlighter-rouge">i</code></li> <li>如果没有找到，则将当前元素在<code class="language-plaintext highlighter-rouge">unordered_map</code>中对应的<code class="language-plaintext highlighter-rouge">value</code>设置为<code class="language-plaintext highlighter-rouge">i</code></li> </ul> </li> <li>以上的算法步骤保证了，如果遍历较小的元素没有找到符合要求的组合，那么在遍历组合中较大的元素时，就可以找到较小的元素，进而返回组合</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">twoSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">hashtable</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">hashtable</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">hashtable</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
                <span class="k">return</span> <span class="p">{</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">i</span><span class="p">};</span>
            <span class="p">}</span>
            <span class="n">hashtable</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="p">{};</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="字母异位词分组">字母异位词分组</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-480.webp 480w,/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-800.webp 800w,/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="猫和老鼠" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点-1">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">emplace_back</code>成员函数 <ul> <li>在<code class="language-plaintext highlighter-rouge">vector</code>或者<code class="language-plaintext highlighter-rouge">unorderd_map</code>尾部添加一个新的元素</li> <li>与<code class="language-plaintext highlighter-rouge">push_back</code>相比，<code class="language-plaintext highlighter-rouge">emplace_back</code>直接在容器内部的内存空间构造对象，避免了临时空间的复制与删除。提高了性能</li> </ul> </li> <li>对于<code class="language-plaintext highlighter-rouge">unordered_map</code>，使用迭代器<code class="language-plaintext highlighter-rouge">it</code>遍历访问<code class="language-plaintext highlighter-rouge">unordered_map</code>中的每一个元素 <ul> <li><code class="language-plaintext highlighter-rouge">it-&gt;self</code>表示这个元素的<code class="language-plaintext highlighter-rouge">key</code></li> <li><code class="language-plaintext highlighter-rouge">it-&gt;second</code>表示这个元素的<code class="language-plaintext highlighter-rouge">value</code></li> </ul> </li> </ul> <h2 id="解题思路-1">解题思路</h2> <ul> <li>使用排序后的字符串的作为哈希表的<code class="language-plaintext highlighter-rouge">key</code> <ul> <li>异位词中的字母（样式和数量）都是相同的，所以排序后的字符串也必然是相同的</li> </ul> </li> <li>哈希表的<code class="language-plaintext highlighter-rouge">value</code>为<code class="language-plaintext highlighter-rouge">vector&lt;string&gt;</code>用来存储同一组异位词</li> <li>最后将每组异位词存入<code class="language-plaintext highlighter-rouge">ans</code></li> </ul> <h2 id="实现代码-1">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">groupAnagrams</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">strs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">mp</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="o">:</span> <span class="n">strs</span><span class="p">){</span>
            <span class="n">string</span> <span class="n">key</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
            <span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">key</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">mp</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="最长连续序列">最长连续序列</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长连续序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点-2">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">unordered_set</code>中的元素都是唯一的，没有重复的 <h2 id="解题思路-2">解题思路</h2> </li> <li>题中要求我们在$\Omega(n)$的时间复杂度中完成搜索</li> <li>我们考虑使用<code class="language-plaintext highlighter-rouge">unordered_set</code>进行存储，这样可以排除重复元素的干扰，因为重复元素不能算作连续序列</li> <li>如果使用暴力搜索，对于一个元素<code class="language-plaintext highlighter-rouge">x</code>，我们要遍历整个数组来搜索<code class="language-plaintext highlighter-rouge">x + 1, x + 2, x + 3, ... , x + y</code> ，这样的算法时间复杂度为$\Omega(n^2)$，显然不符合要求</li> <li>为了优化算法时间复杂度，在搜索时，对于元素<code class="language-plaintext highlighter-rouge">x</code>，我们首先判断<code class="language-plaintext highlighter-rouge">x - 1</code> 是否在<code class="language-plaintext highlighter-rouge">unordered_set</code>中 <ul> <li>如果在，则跳过当前对当前<code class="language-plaintext highlighter-rouge">x</code>的遍历，因为从<code class="language-plaintext highlighter-rouge">x - 1</code>开始的连续序列一定要长于从<code class="language-plaintext highlighter-rouge">x</code>开始的连续序列，没有继续搜索的必要</li> <li>如果不在，则执行循环，寻找下一个<code class="language-plaintext highlighter-rouge">x + 1, x + 2, ..., x + y</code>是否在序列中</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">ans = max(ans, y - x)</code> <ul> <li>因为<code class="language-plaintext highlighter-rouge">int y = x + 1</code>和在循环中执行了<code class="language-plaintext highlighter-rouge">y ++</code>，所以直接<code class="language-plaintext highlighter-rouge">y - x</code>就是最长序列的长度</li> </ul> </li> </ul> <h2 id="实现代码-2">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">longestConsecutive</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">:</span> <span class="n">st</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
                <span class="n">y</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[hot100系列——哈希的学习笔记：知识点、思想、代码]]></summary></entry></feed>