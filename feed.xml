<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blueberrymann.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blueberrymann.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-18T03:28:04+00:00</updated><id>https://blueberrymann.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">20250218力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250218力扣每日一题"/><published>2025-02-18T02:22:07+00:00</published><updated>2025-02-18T02:22:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-480.webp 480w,/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-800.webp 800w,/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%8C%BA%E9%97%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E6%95%B0%E5%AD%97%E7%9A%84%E6%A6%82%E7%8E%87.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="区间内查询数字的概率" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">c++</code>中<code class="language-plaintext highlighter-rouge">vector</code>的<code class="language-plaintext highlighter-rouge">lower_bound</code>和<code class="language-plaintext highlighter-rouge">upper_bound</code>操作： <ul> <li><code class="language-plaintext highlighter-rouge">lower_bound</code> <ul> <li>传入的参数：查找范围初始点的迭代器，查找范围结束点的迭代器，待查找的目标值</li> <li>返回值：返回指向第一个<strong>大于等于</strong>目标值的元素的迭代器</li> <li>用法：<code class="language-plaintext highlighter-rouge">auto l = lower_bound(pos.begin(), pos.end(), value)</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">upper_bound</code> <ul> <li>传入的参数：查找范围初始点的迭代器，查找范围结束点的迭代器，待查找的目标值</li> <li>返回值：返回指向第一个<strong>大于</strong>目标值的元素的迭代器</li> <li>用法：<code class="language-plaintext highlighter-rouge">auto r = upper_bound(pos.begin(), pos.end(), value)</code></li> </ul> </li> <li>如果没有查找到目标值，那么两个操作返回的内容均为<code class="language-plaintext highlighter-rouge">pos.end()</code></li> </ul> </li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>每次查询的过程分为两步 <ol> <li>得到目标数<code class="language-plaintext highlighter-rouge">value</code>在数组<code class="language-plaintext highlighter-rouge">arr</code>中的所有下标</li> <li>在这些下标中计算位于闭区间的<code class="language-plaintext highlighter-rouge">[left, right]</code>的下标个数并返回</li> </ol> </li> <li>由于<code class="language-plaintext highlighter-rouge">arr</code>初始化后就不在变化，可以构建以<code class="language-plaintext highlighter-rouge">arr</code>中元素值为键，值的对应下标数组为值的哈希表，来存储数组中的信息</li> <li>构建哈希表时，我们顺序遍历<code class="language-plaintext highlighter-rouge">arr</code>数组，这样保证了每个键对应的下标数组都是有序的</li> <li>查找时，根据传入的参数中的<code class="language-plaintext highlighter-rouge">value</code>找到对应的下标数组 <ul> <li>首先查找第一个大于等于<code class="language-plaintext highlighter-rouge">left</code>的下标的迭代器<code class="language-plaintext highlighter-rouge">l</code>位置</li> <li>其次查找第一个大于<code class="language-plaintext highlighter-rouge">right</code>的下标的迭代器<code class="language-plaintext highlighter-rouge">r</code>位置</li> </ul> </li> <li>返回<code class="language-plaintext highlighter-rouge">r - l</code>，即为答案</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="题解代码">题解代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RangeFreqQuery</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">occurence</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="n">RangeFreqQuery</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
            <span class="n">occurence</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">query</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">pos</span> <span class="o">=</span> <span class="n">occurence</span><span class="p">[</span><span class="n">value</span><span class="p">];</span>

        <span class="k">auto</span> <span class="n">l</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pos</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">left</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">r</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pos</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">right</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * Your RangeFreqQuery object will be instantiated and called as such:
 * RangeFreqQuery* obj = new RangeFreqQuery(arr);
 * int param_1 = obj-&gt;query(left,right,value);
 */</span>
</code></pre></div></div> <h3 id="我的代码超时了无敌了炸了">我的代码（超时了，无敌了，炸了）</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RangeFreqQuery</span> <span class="p">{</span>
<span class="nl">private:</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="n">RangeFreqQuery</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">query</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">subnums</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">left</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">subnums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">subnums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">subnums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">subnums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">value</span><span class="p">)</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">index_1</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">subnums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">subnums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">index_2</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">index_2</span> <span class="o">-</span> <span class="n">index_1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * Your RangeFreqQuery object will be instantiated and called as such:
 * RangeFreqQuery* obj = new RangeFreqQuery(arr);
 * int param_1 = obj-&gt;query(left,right,value);
 */</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250217力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250217力扣每日一题"/><published>2025-02-17T02:21:07+00:00</published><updated>2025-02-17T02:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%8725%25%E7%9A%84%E5%85%83%E7%B4%A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有序数组中出现次数超过25%的元素" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>无</li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>定义一个<code class="language-plaintext highlighter-rouge">cnt</code>变量，记录与当前元素在数组中共有多少个</li> <li>当遇到不一样的变量时，<code class="language-plaintext highlighter-rouge">cnt</code>归零，重新开始记录</li> <li>每次<code class="language-plaintext highlighter-rouge">cnt</code>更新之后，判断<code class="language-plaintext highlighter-rouge">cnt * 4</code>与<code class="language-plaintext highlighter-rouge">arr.size()</code>的大小。</li> <li>由题意可知，数组内只存在一个符合条件的元素，所以当<code class="language-plaintext highlighter-rouge">cnt * 4 &gt; arr.size()</code>时，直接返回当前元素</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">findSpecialInteger</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span>  <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">target</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">4</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">cnt</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250215力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250215力扣每日一题"/><published>2025-02-16T12:21:07+00:00</published><updated>2025-02-16T12:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-480.webp 480w,/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-800.webp 800w,/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="球会落何处" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <h2 id="解题思路">解题思路</h2> <ul> <li><strong>模拟</strong></li> <li>当球进入一个格子内的时候，有两种情况： <ul> <li>格子的挡板可以把球向右推，即该格内的数值为1 <ul> <li>如果右侧的格子挡板为-1，或者右侧为边界时，此时球无法继续下落，可以中止循环</li> <li>如果右侧的格子挡板为1，此时球可以下落</li> </ul> </li> <li>格子的挡板可以把球左推，即该格内的数值为-1 <ul> <li>如果左侧的格子挡板为1，或者左侧为边界，此时球无法继续下落，可以中止循环</li> <li>如果右侧的格子挡板为-1，此时球可以下落</li> </ul> </li> </ul> </li> <li>循环执行上述模拟步骤，直至到达最底层</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">findBall</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">row</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">else</span>
                        <span class="n">col</span> <span class="o">++</span><span class="p">;</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">else</span>
                        <span class="n">col</span> <span class="o">--</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// falling to the ground</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250216力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250216力扣每日一题"/><published>2025-02-16T12:21:07+00:00</published><updated>2025-02-16T12:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-480.webp 480w,/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-800.webp 800w,/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="将每个元素替换为右侧最大元素" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>无</li> </ul> <h2 id="解题思路">解题思路</h2> <h3 id="题解思路">题解思路</h3> <ul> <li>逆向遍历数组，定义一个新数组用来存储赋值后的数组</li> <li>从后遍历数组 <ul> <li>最后一个元素的值为<code class="language-plaintext highlighter-rouge">-1</code></li> <li>前面的所有元素的值为<code class="language-plaintext highlighter-rouge">ans[i] = max(ans[i + 1], arr[i + 1])</code>，这样的方法当在<code class="language-plaintext highlighter-rouge">arr</code>数组中遇到更大的元素之后，可以及时的更新</li> </ul> </li> </ul> <h4 id="我的思路">我的思路</h4> <ul> <li>正向遍历数组，定义两个指针<code class="language-plaintext highlighter-rouge">i</code>和<code class="language-plaintext highlighter-rouge">j</code>，<code class="language-plaintext highlighter-rouge">i</code>用来指向当前已遍历到的元素</li> <li>从<code class="language-plaintext highlighter-rouge">i + 1</code>到数组末尾的范围内查找最大元素<code class="language-plaintext highlighter-rouge">val</code>，并将其下标存入<code class="language-plaintext highlighter-rouge">index</code>内 <ul> <li>事实证明，如果从<code class="language-plaintext highlighter-rouge">i</code>开始找，如果找到的元素是数组中最大的元素，那么会陷入死循环</li> </ul> </li> <li>从<code class="language-plaintext highlighter-rouge">i</code>到<code class="language-plaintext highlighter-rouge">index</code>，将所有的值赋值为<code class="language-plaintext highlighter-rouge">val</code></li> <li>重复上述过程</li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="题解代码">题解代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">replaceElements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
        <span class="n">ans</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">){</span>
            <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">replaceElements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">max_element</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">it</span> <span class="o">-</span> <span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"test1"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">arr</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">二分（hot100 &amp;amp; acwing &amp;amp; 个人总结）</title><link href="https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86/" rel="alternate" type="text/html" title="二分（hot100 &amp;amp; acwing &amp;amp; 个人总结）"/><published>2025-02-14T02:46:45+00:00</published><updated>2025-02-14T02:46:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/hot100-and-acwing-%E4%BA%8C%E5%88%86/"><![CDATA[<h1 id="前言">前言</h1> <ul> <li>被这个二分查找折磨得实在是不成样子了，感觉题目很难想出来，题目即使ac了也感觉莫名奇妙的</li> </ul> <h1 id="思想">思想</h1> <h2 id="整数二分">整数二分</h2> <ul> <li>整数二分的本质：给定一个性质，将一个区间划分为<strong>满足该性质</strong>和<strong>不满足该性质</strong>的两个区间，通过二分可以查找到<strong>区间的边界</strong>。如图所示，下图的红绿边界的端点都可以被找到，对应不同的模版</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-480.webp 480w,/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-800.webp 800w,/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="整数二分的示意图" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="寻找红色边界端点">寻找红色边界端点</h3> <ul> <li>初始化<code class="language-plaintext highlighter-rouge">l = 0, r = vec.size(), mid = (l + r + 1) / 2</code></li> </ul> \[mid = \frac{l+r+1}{2}\] <ul> <li>判断<code class="language-plaintext highlighter-rouge">mid</code>指向的元素是否符合红色区域性质 <ul> <li>如果符合，则说明红色区间端点位于<code class="language-plaintext highlighter-rouge">[mid, r]</code>，更新<code class="language-plaintext highlighter-rouge">l = mid</code></li> <li>如果不符合，则说明红色区间端点位于<code class="language-plaintext highlighter-rouge">[l, mid - 1]</code>，更新<code class="language-plaintext highlighter-rouge">r = mid - 1</code></li> </ul> </li> </ul> <h4 id="为什么要-1呢">为什么要<code class="language-plaintext highlighter-rouge">+ 1</code>呢？</h4> <ul> <li>当<code class="language-plaintext highlighter-rouge">l = r - 1</code>时，<code class="language-plaintext highlighter-rouge">mid = (l + r) / 2</code>的计算结果为<code class="language-plaintext highlighter-rouge">(l+r)/2 = (r-1+r)/2 = r-1 = l</code></li> <li>此时，若<code class="language-plaintext highlighter-rouge">check(mid)</code>返回<code class="language-plaintext highlighter-rouge">true</code>，则将进入死循环</li> <li>当<code class="language-plaintext highlighter-rouge">+ 1</code>之后，<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2 = r</code>，更新后<code class="language-plaintext highlighter-rouge">l = r</code>，可以中止循环</li> </ul> <h3 id="寻找绿色边界端点">寻找绿色边界端点</h3> <ul> <li>初始化<code class="language-plaintext highlighter-rouge">mid = (l + r) / 2</code> \(mid =\frac{l+r}{2}\)</li> <li>判断<code class="language-plaintext highlighter-rouge">mid</code>指向的元素是否满足绿色区域性质 <ul> <li>如果符合，则说明绿色边界端点位于<code class="language-plaintext highlighter-rouge">[l, mid]</code>之间，更新<code class="language-plaintext highlighter-rouge">r = mid</code></li> <li>如果不符合，则说明绿色边界端点位于<code class="language-plaintext highlighter-rouge">[mid + 1, r]</code>， 更新<code class="language-plaintext highlighter-rouge">r = mid + 1</code></li> </ul> </li> </ul> <h3 id="解题心路历程">解题心路历程</h3> <ul> <li>写一个<code class="language-plaintext highlighter-rouge">check</code>函数</li> <li>根据<code class="language-plaintext highlighter-rouge">check</code>函数中定义的要获取哪个区间的端点，来确定<code class="language-plaintext highlighter-rouge">mid</code>是否需要<code class="language-plaintext highlighter-rouge">+ 1</code> <ul> <li>如果寻找的是红色区间端点，那么就需要<code class="language-plaintext highlighter-rouge">+ 1</code></li> <li>如果寻找的是绿色区间端点，那么就不需要<code class="language-plaintext highlighter-rouge">+ 1</code></li> </ul> </li> </ul> <h1 id="模版">模版</h1> <h2 id="寻找红色边界端点-1">寻找红色边界端点</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="为什么l一定能等于r">为什么l一定能等于r</h3> <ul> <li>假设<code class="language-plaintext highlighter-rouge">l = r - 1</code>，那么<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2 = r</code></li> <li>两种更新方式： <ul> <li><code class="language-plaintext highlighter-rouge">l = mid</code>: 那么<code class="language-plaintext highlighter-rouge">l = r</code></li> <li><code class="language-plaintext highlighter-rouge">r = mid - 1</code>: 那么<code class="language-plaintext highlighter-rouge">r = r - 1 = l</code></li> </ul> </li> </ul> <h3 id="为什么l--r循环中止的时候l指向的元素一定是端点">为什么<code class="language-plaintext highlighter-rouge">l == r</code>（循环中止的时候），l指向的元素一定是端点</h3> <ul> <li>证明$\text{nums}[l]\leq \text{target}, \text{nums}[r+1] &gt; target$</li> <li>假设在第k次循环中，$\text{nums}[l]\leq \text{target}, \text{nums}[r+1] &gt; target$成立 <ul> <li>如果$\text{nums}[mid] \leq \text{target}$，那么$l = mid$ <ul> <li>对于$\text{nums}[l]\leq \text{target}$：$\text{nums}[l] = \text{nums}[mid]\leq \text{target}$，依旧成立</li> <li>对于$\text{nums}[r+1] &gt; target$：$r$没变，依旧成立</li> </ul> </li> <li>如果$\text{nums}[mid] &gt; \text{target}$，那么$r = mid - 1$ <ul> <li>对于$\text{nums}[l]\leq \text{target}$：$l$没变，依旧成立</li> <li>对于$\text{nums}[r+1] &gt; \text{target}$：$\text{nums}[r+1] = \text{nums}[mid]&gt;\text{target}$，依旧成立</li> </ul> </li> </ul> </li> <li>在循环中止时，$l = r$，此时$\text{nums}[l]\leq \text{target},\text{nums}[r+1]=\text{nums}[l+1]&gt;\text{target}$，所以$l$就是所求区间的端点</li> </ul> <h2 id="寻找绿色边界端点-1">寻找绿色边界端点</h2> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="为什么l一定能等于r-1">为什么l一定能等于r</h3> <ul> <li>假设<code class="language-plaintext highlighter-rouge">l = r - 1</code>，此时<code class="language-plaintext highlighter-rouge">mid = (l + l + 1) / 2 = l</code></li> <li>两种更新方式： <ul> <li><code class="language-plaintext highlighter-rouge">r = mid</code>: 那么<code class="language-plaintext highlighter-rouge">r = mid = l</code></li> <li><code class="language-plaintext highlighter-rouge">l = mid + 1</code>: 那么<code class="language-plaintext highlighter-rouge">l = l + 1 = r</code></li> </ul> </li> </ul> <h3 id="为什么l--r循环中止的时候l指向的元素一定是端点-1">为什么<code class="language-plaintext highlighter-rouge">l == r</code>（循环中止的时候），l指向的元素一定是端点</h3> <ul> <li>证明<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target（l &gt; 0）, nums[r] &gt;= target</code></li> <li>初始 <ul> <li>两个条件一定符合</li> </ul> </li> <li>循环中 <ul> <li>假设对于第k次 <ul> <li><code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target</code>成立 <ul> <li>在第<code class="language-plaintext highlighter-rouge">k + 1</code>次中，如果更新<code class="language-plaintext highlighter-rouge">r</code>，那么<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target</code>依旧成立;如果更新<code class="language-plaintext highlighter-rouge">l</code>，那么说明<code class="language-plaintext highlighter-rouge">nums[mid] &lt; target</code>，此时<code class="language-plaintext highlighter-rouge">l - 1 = mid</code>，所以<code class="language-plaintext highlighter-rouge">nums[l - 1] = nums[mid] &lt; target</code></li> <li>得证</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">nums[r] &gt;= target</code>成立 <ul> <li>如果更新<code class="language-plaintext highlighter-rouge">l</code>，那么依旧成立；如果更新<code class="language-plaintext highlighter-rouge">r</code>， <code class="language-plaintext highlighter-rouge">r = mid</code>， <code class="language-plaintext highlighter-rouge">nums[r] = nums[mid] &gt;= target</code></li> <li>得证</li> </ul> </li> </ul> </li> </ul> </li> <li>循环结束时，由于前面的证明，我们知道<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target, nums[r] &gt;= target</code>，由于<code class="language-plaintext highlighter-rouge">l = r</code>，那么<code class="language-plaintext highlighter-rouge">nums[l - 1] &lt; target, nums[l] &gt;= target</code></li> <li>综上，我们可以说<code class="language-plaintext highlighter-rouge">l</code>指向的元素就是我们查找的红色区间的端点</li> </ul> <h1 id="刷题">刷题</h1> <h2 id="leetcode">LeetCode</h2> <h3 id="搜索二维矩阵">搜索二维矩阵</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-480.webp 480w,/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-800.webp 800w,/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="搜索二维矩阵" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="知识点">知识点</h4> <h4 id="解题思路">解题思路</h4> <ul> <li>首先确定要划分的左右区间，左边区间为<code class="language-plaintext highlighter-rouge">&lt;= target</code>，右边区间为<code class="language-plaintext highlighter-rouge">&gt; target</code></li> <li>我们要寻找的就是左侧区间端点，只有左侧区间端点才有可能等于<code class="language-plaintext highlighter-rouge">target</code>，如果端点不等于，那么该矩阵中就没有<code class="language-plaintext highlighter-rouge">target</code></li> <li>根据分析，此时<code class="language-plaintext highlighter-rouge">mid = (l + r + 1) / 2</code>，经过一系列迭代后，<code class="language-plaintext highlighter-rouge">l == r</code>退出循环</li> <li>返回<code class="language-plaintext highlighter-rouge">l</code>，即为端点值</li> </ul> <h4 id="实现代码">实现代码</h4> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">searchMatrix</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">matrix</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>

        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">mid</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">l</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>


        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>

        <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">][</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">){</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">][</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="参考资料链接">参考资料链接</h1> <ul> <li><a href="https://www.acwing.com/video/231/">AcWing: 二分查找-数的范围课程</a></li> <li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3073/">AcWing: 二分查找算法模板By Yxc</a></li> <li><a href="https://blog.csdn.net/WJPnb1/article/details/126360962?spm=1001.2014.3001.5502">CSDN博客：不需要考虑mid + 1, mid - 1的二分查找模版</a></li> <li><a href="https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d6c2594da70bed6663d829af474e8518">B站视频：二分查找为什么总是写错？</a></li> <li><a href="https://www.acwing.com/solution/content/3338/">AcWing-题解-数的范围（详细分析二分过程）</a></li> </ul> <h1 id="草纸">草纸</h1> <ul> <li>r = l + 1;</li> <li>mid = (l + r) / 2 = (2l + 1) / 2 = l</li> </ul>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><category term="binary-search"/><summary type="html"><![CDATA[学习二分查找思想和板子，总结经验，刷题]]></summary></entry><entry><title type="html">树与图的深度优先遍历</title><link href="https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/" rel="alternate" type="text/html" title="树与图的深度优先遍历"/><published>2025-02-13T09:13:45+00:00</published><updated>2025-02-13T09:13:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-480.webp 480w,/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-800.webp 800w,/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="树的重心" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>dfs</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">st</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">){</span>
    <span class="n">st</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>
    <span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <h2 id="实现代码">实现代码</h2>]]></content><author><name></name></author><category term="learning-notebook"/><category term="DFS"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习树与图的深度优先遍历思想和板子]]></summary></entry><entry><title type="html">20250213力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250213力扣每日一题"/><published>2025-02-13T02:21:07+00:00</published><updated>2025-02-13T02:21:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-480.webp 480w,/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-800.webp 800w,/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%9B%92%E5%AD%90%E4%B8%AD%E5%B0%8F%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="盒子中小球的最大数量" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <h2 id="解题思路">解题思路</h2> <h2 id="实现代码">实现代码</h2> <h3 id="我的代码">我的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">countBalls</span><span class="p">(</span><span class="kt">int</span> <span class="n">lowLimit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">highLimit</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">boxes</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lowLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">highLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
                <span class="n">tmp</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">boxes</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">sum</span><span class="p">)){</span>
                <span class="n">boxes</span><span class="p">[</span><span class="n">sum</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">boxes</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="n">sum</span><span class="p">,</span> <span class="mi">1</span><span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">boxes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">boxes</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">MaxCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ansIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">p</span><span class="o">:</span> <span class="n">ans</span><span class="p">){</span>

            <span class="n">MaxCnt</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">MaxCnt</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">MaxCnt</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="题解中的代码">题解中的代码</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">countBalls</span><span class="p">(</span><span class="kt">int</span> <span class="n">lowLimit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">highLimit</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">cnt</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lowLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">highLimit</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">box</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
                <span class="n">box</span> <span class="o">+=</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">x</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">cnt</span><span class="p">[</span><span class="n">box</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">cnt</span><span class="p">[</span><span class="n">box</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">拓扑排序</title><link href="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="拓扑排序"/><published>2025-02-12T14:13:45+00:00</published><updated>2025-02-12T14:13:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"><![CDATA[<h1 id="有向图的拓扑序列">有向图的拓扑序列</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向图的拓扑序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>只有有向无环图才有拓扑序列</li> <li>拓扑序列：若一个图中所有点构成的序列$A$满足：对于图中每条边$(x,y)$，$x$在$A$中都出现在$y$之前，则称$A$是该图的一个拓扑序列</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向无环图" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>对于上面这个图，它的一个拓扑序列为$1\to 3\to 2\to 4\to 5$</li> <li>度数 <ul> <li>入度：一个点进来的边数</li> <li>出度：一个点出去的边数</li> </ul> </li> <li><strong>证明：一个有向无环图必然存在一个入度为0的点</strong> <ul> <li>使用反证法：假设在这个图中所有的点的入度都大于等于1</li> <li>假设这个图中有$n$个店，那么我们进行$n + 1$次反向查找到上一个端点</li> <li>根据抽屉原理，在这$n + 1$次查找中，必然有两个点是相同的，那么就说明存在着一个环</li> <li>但是<strong>存在环</strong>与<strong>有向无环图</strong>的前提相违背，所以假设不成立</li> <li>综上，<strong>一个有向无环图必然存在一个入度为0的点</strong>得证</li> </ul> </li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-480.webp 480w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-800.webp 800w,/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="有向图的邻接表存储结构" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>图的邻接表存储： <ul> <li>邻接表的模拟存储本质上就是<strong>使用多个单链表进行存储</strong></li> <li>使用<code class="language-plaintext highlighter-rouge">h[N]</code>数组存储头结点的信息，<code class="language-plaintext highlighter-rouge">e[N]</code>数组存储有向边的尾部节点，<code class="language-plaintext highlighter-rouge">ne[idx]</code>数组存储该点指向下一节点的指针，请注意：<strong>这里的两个结点都是以<code class="language-plaintext highlighter-rouge">h[i]</code>为头结点的有向边指向的终点结点，这就是一个头插法</strong></li> <li>举一个具体的例子，假设我们要加入一条从<code class="language-plaintext highlighter-rouge">a</code>指向<code class="language-plaintext highlighter-rouge">b</code>的有向边，我们首先初始化端点b，这个端点指向下一节点的指针等于<code class="language-plaintext highlighter-rouge">h[a]</code>,更新<code class="language-plaintext highlighter-rouge">h[a]</code>指向下一节点的指针为<code class="language-plaintext highlighter-rouge">idx</code>，并将<code class="language-plaintext highlighter-rouge">idx ++</code></li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>寻找入度为0的点都可以作为拓扑序列最前面的元素，把所有入度为0的点入队</li> <li>进行BFS <ul> <li>当队列不为空时，将队列头元素出队，设为<code class="language-plaintext highlighter-rouge">t</code></li> <li>依次枚举<code class="language-plaintext highlighter-rouge">t</code>的所有出边$\text{t} \to \text{j}$</li> <li>删掉$\text{t} \to \text{j}$，更新<code class="language-plaintext highlighter-rouge">j</code>的入度<code class="language-plaintext highlighter-rouge">d[j] --</code></li> <li><code class="language-plaintext highlighter-rouge">if(d[j] == 0)</code>，说明<code class="language-plaintext highlighter-rouge">j</code>前面的所有元素都已经遍历完毕，<code class="language-plaintext highlighter-rouge">j</code>可以入队</li> </ul> </li> </ul> <h2 id="实现代码">实现代码</h2> <h3 id="y总照抄版">y总照抄版</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">100010</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>


<span class="kt">void</span> <span class="nf">add</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">toposort</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">hh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="n">hh</span> <span class="o">&lt;=</span> <span class="n">tt</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">hh</span> <span class="o">++</span><span class="p">];</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">t</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">--</span> <span class="n">d</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>

        <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">toposort</span><span class="p">())</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="20250213理解了之后重写了一版">20250213理解了之后重写了一版</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">e</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">ne</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">idx</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">hh</span><span class="p">,</span> <span class="n">tt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">e</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">ne</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">toposort</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="n">tt</span> <span class="o">&gt;=</span> <span class="n">hh</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">hh</span> <span class="o">++</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">];</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ne</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">--</span> <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">q</span><span class="p">[</span><span class="o">++</span> <span class="n">tt</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">tt</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tt</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">h</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
        <span class="n">d</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">toposort</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>


<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习拓扑排序思想和板子]]></summary></entry><entry><title type="html">一些有用的终端指令</title><link href="https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/" rel="alternate" type="text/html" title="一些有用的终端指令"/><published>2025-02-12T13:35:07+00:00</published><updated>2025-02-12T13:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/"><![CDATA[<h1 id="个人网站">个人网站</h1> <ul> <li>之前在网站部署时，经常会出现<code class="language-plaintext highlighter-rouge">Prettier code formatter</code>的报错，只需要在push前，运行下面这行指令就可以解决</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nt">--write</span> <span class="nb">.</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="summary"/><category term="terminal"/><category term="code"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">Metrics of Data Quality in LLM</title><link href="https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM/" rel="alternate" type="text/html" title="Metrics of Data Quality in LLM"/><published>2025-02-12T12:35:07+00:00</published><updated>2025-02-12T12:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/DataQuality-in-LLM/"><![CDATA[<div class="row justify-content-center"> <div class="col-lg-8 col-md-10"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/svg/Data%20Quality%20Metrics%20in%20LLM.svg" sizes="95vw"/> <img src="/assets/img/svg/Data%20Quality%20Metrics%20in%20LLM.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Data Quality Metrics in LLM Mindmap" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row justify-content-center"> <div class="col-lg-8 col-md-10"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Typical_RAG_Architecture-480.webp 480w,/assets/img/Typical_RAG_Architecture-800.webp 800w,/assets/img/Typical_RAG_Architecture-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Typical_RAG_Architecture.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Typical_RAG_Architecutre" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="summary"/><category term="LLM"/><category term="Data-Quality"/><category term="FederatedLearningGroup"/><summary type="html"><![CDATA[目前正在研究LLM中评价数据质量的指标都有什么]]></summary></entry></feed>