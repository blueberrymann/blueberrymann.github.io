<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blueberrymann.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blueberrymann.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-12T05:02:35+00:00</updated><id>https://blueberrymann.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">20250212力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250212力扣每日一题"/><published>2025-02-12T03:35:07+00:00</published><updated>2025-02-12T03:35:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-480.webp 480w,/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-800.webp 800w,/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E8%A2%8B%E5%AD%90%E9%87%8C%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%90%83.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="袋子里最少数量的球" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>寻找数组中最大的元素 <ul> <li><code class="language-plaintext highlighter-rouge">max_element(nums.begin(), nums.end())</code>返回的是迭代器</li> <li><code class="language-plaintext highlighter-rouge">*</code>操作符解引用了迭代器，直接获取了元素</li> </ul> </li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">findMax</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">){</span>
    <span class="n">MaxElement</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">MaxElement</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-480.webp 480w,/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-800.webp 800w,/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%A4%A9%E8%B5%90%E7%BB%86%E8%8E%B2%E7%9A%84%E8%AF%84%E8%AE%BA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="天赐细莲的评论" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>理解题意，将题目中的要求转化为： <ul> <li><strong>给定<code class="language-plaintext highlighter-rouge">maxOperations</code>操作次数，能否可以将单个袋子中球数目的最大值不超过<code class="language-plaintext highlighter-rouge">y</code></strong></li> </ul> </li> <li>假设$y = y_0$满足条件，那么所有$y &gt; y_0$肯定都符合条件，我们要找出一个$y_{optimal}$，使得所有$y \geq y_{optimal}$符合条件，所有$y &lt; y_{optimal}$不符合条件</li> <li>可以考虑使用二分查找$y_{opt}$</li> <li>初始化<code class="language-plaintext highlighter-rouge">left = 1, right = *max_element(nums.begin(), nums.end())</code></li> <li>判断每个袋子中的球数需要的操作数，使用下列公式进行计算，该公式含义为： <ul> <li>当<code class="language-plaintext highlighter-rouge">nums[i] &lt;= y</code>时，操作数为0</li> <li>当<code class="language-plaintext highlighter-rouge">y &lt; nums[i] &lt;= 2y</code>时，操作数为1</li> <li>当<code class="language-plaintext highlighter-rouge">2y &lt; nums[i] &lt;= 3y</code>时，操作数为2</li> <li>……</li> </ul> </li> </ul> \[\left\lfloor \frac{\text{nums}[i] - 1}{y} \right\rfloor\] <ul> <li>遍历<code class="language-plaintext highlighter-rouge">nums</code>中的所有元素，获取预期操作数</li> <li>如果操作数大于<code class="language-plaintext highlighter-rouge">maxOperations</code>，则说明<code class="language-plaintext highlighter-rouge">y</code>较小，<code class="language-plaintext highlighter-rouge">left = y + 1</code>，说明所有小于等于当前<code class="language-plaintext highlighter-rouge">y</code>值都不行</li> <li>如果操作数小于<code class="language-plaintext highlighter-rouge">maxOperations</code>，则说明<code class="language-plaintext highlighter-rouge">y</code>较大，<code class="language-plaintext highlighter-rouge">right = y - 1</code>，我们继续寻找有没有符合条件的更小的<code class="language-plaintext highlighter-rouge">y</code>值</li> <li>直至<code class="language-plaintext highlighter-rouge">left &gt; right</code>，我们获得<code class="language-plaintext highlighter-rouge">y</code>值就是符合这两个条件的</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">minimumSize</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxOperations</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="kt">long</span> <span class="kt">long</span> <span class="n">ops</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">:</span> <span class="n">nums</span><span class="p">){</span>
                <span class="n">ops</span> <span class="o">+=</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">ops</span> <span class="o">&lt;=</span> <span class="n">maxOperations</span><span class="p">){</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">hot100系列——哈希</title><link href="https://blueberrymann.github.io/blog/2025/hot100-hash/" rel="alternate" type="text/html" title="hot100系列——哈希"/><published>2025-02-11T03:56:07+00:00</published><updated>2025-02-11T03:56:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/hot100-hash</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/hot100-hash/"><![CDATA[<h1 id="两数之和">两数之和</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-480.webp 480w,/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-800.webp 800w,/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="两数之和" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">unordered_map</code>有<code class="language-plaintext highlighter-rouge">find</code>操作，传入待查询的<code class="language-plaintext highlighter-rouge">key</code>值 <ul> <li>如果有对应<code class="language-plaintext highlighter-rouge">key</code>值，则返回位于该位置的迭代器；</li> <li>如果没有对应<code class="language-plaintext highlighter-rouge">key</code>值，则返回<code class="language-plaintext highlighter-rouge">unordered_map::end()</code>迭代器</li> </ul> </li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>首先初始化一个<code class="language-plaintext highlighter-rouge">unordered_map</code>，<code class="language-plaintext highlighter-rouge">nums</code>中的元素作为<code class="language-plaintext highlighter-rouge">key</code>，每个元素的下标作为<code class="language-plaintext highlighter-rouge">value</code></li> <li>遍历<code class="language-plaintext highlighter-rouge">nums</code>数组中的每一个元素<code class="language-plaintext highlighter-rouge">num</code> <ul> <li>如果<code class="language-plaintext highlighter-rouge">unorder_map</code>找到<code class="language-plaintext highlighter-rouge">target - num</code>，则返回对应的下标和<code class="language-plaintext highlighter-rouge">num</code>对应下标<code class="language-plaintext highlighter-rouge">i</code></li> <li>如果没有找到，则将当前元素在<code class="language-plaintext highlighter-rouge">unordered_map</code>中对应的<code class="language-plaintext highlighter-rouge">value</code>设置为<code class="language-plaintext highlighter-rouge">i</code></li> </ul> </li> <li>以上的算法步骤保证了，如果遍历较小的元素没有找到符合要求的组合，那么在遍历组合中较大的元素时，就可以找到较小的元素，进而返回组合</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">twoSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">hashtable</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">hashtable</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">hashtable</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
                <span class="k">return</span> <span class="p">{</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">i</span><span class="p">};</span>
            <span class="p">}</span>
            <span class="n">hashtable</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="p">{};</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="字母异位词分组">字母异位词分组</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-480.webp 480w,/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-800.webp 800w,/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="猫和老鼠" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点-1">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">emplace_back</code>成员函数 <ul> <li>在<code class="language-plaintext highlighter-rouge">vector</code>或者<code class="language-plaintext highlighter-rouge">unorderd_map</code>尾部添加一个新的元素</li> <li>与<code class="language-plaintext highlighter-rouge">push_back</code>相比，<code class="language-plaintext highlighter-rouge">emplace_back</code>直接在容器内部的内存空间构造对象，避免了临时空间的复制与删除。提高了性能</li> </ul> </li> <li>对于<code class="language-plaintext highlighter-rouge">unordered_map</code>，使用迭代器<code class="language-plaintext highlighter-rouge">it</code>遍历访问<code class="language-plaintext highlighter-rouge">unordered_map</code>中的每一个元素 <ul> <li><code class="language-plaintext highlighter-rouge">it-&gt;self</code>表示这个元素的<code class="language-plaintext highlighter-rouge">key</code></li> <li><code class="language-plaintext highlighter-rouge">it-&gt;second</code>表示这个元素的<code class="language-plaintext highlighter-rouge">value</code></li> </ul> </li> </ul> <h2 id="解题思路-1">解题思路</h2> <ul> <li>使用排序后的字符串的作为哈希表的<code class="language-plaintext highlighter-rouge">key</code> <ul> <li>异位词中的字母（样式和数量）都是相同的，所以排序后的字符串也必然是相同的</li> </ul> </li> <li>哈希表的<code class="language-plaintext highlighter-rouge">value</code>为<code class="language-plaintext highlighter-rouge">vector&lt;string&gt;</code>用来存储同一组异位词</li> <li>最后将每组异位词存入<code class="language-plaintext highlighter-rouge">ans</code></li> </ul> <h2 id="实现代码-1">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">groupAnagrams</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">strs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">mp</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="o">:</span> <span class="n">strs</span><span class="p">){</span>
            <span class="n">string</span> <span class="n">key</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
            <span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">key</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">mp</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="最长连续序列">最长连续序列</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-480.webp 480w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-800.webp 800w,/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="最长连续序列" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点-2">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">unordered_set</code>中的元素都是唯一的，没有重复的 <h2 id="解题思路-2">解题思路</h2> </li> <li>题中要求我们在$\Omega(n)$的时间复杂度中完成搜索</li> <li>我们考虑使用<code class="language-plaintext highlighter-rouge">unordered_set</code>进行存储，这样可以排除重复元素的干扰，因为重复元素不能算作连续序列</li> <li>如果使用暴力搜索，对于一个元素<code class="language-plaintext highlighter-rouge">x</code>，我们要遍历整个数组来搜索<code class="language-plaintext highlighter-rouge">x + 1, x + 2, x + 3, ... , x + y</code> ，这样的算法时间复杂度为$\Omega(n^2)$，显然不符合要求</li> <li>为了优化算法时间复杂度，在搜索时，对于元素<code class="language-plaintext highlighter-rouge">x</code>，我们首先判断<code class="language-plaintext highlighter-rouge">x - 1</code> 是否在<code class="language-plaintext highlighter-rouge">unordered_set</code>中 <ul> <li>如果在，则跳过当前对当前<code class="language-plaintext highlighter-rouge">x</code>的遍历，因为从<code class="language-plaintext highlighter-rouge">x - 1</code>开始的连续序列一定要长于从<code class="language-plaintext highlighter-rouge">x</code>开始的连续序列，没有继续搜索的必要</li> <li>如果不在，则执行循环，寻找下一个<code class="language-plaintext highlighter-rouge">x + 1, x + 2, ..., x + y</code>是否在序列中</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">ans = max(ans, y - x)</code> <ul> <li>因为<code class="language-plaintext highlighter-rouge">int y = x + 1</code>和在循环中执行了<code class="language-plaintext highlighter-rouge">y ++</code>，所以直接<code class="language-plaintext highlighter-rouge">y - x</code>就是最长序列的长度</li> </ul> </li> </ul> <h2 id="实现代码-2">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">longestConsecutive</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">:</span> <span class="n">st</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
                <span class="n">y</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[hot100系列——哈希的学习笔记：知识点、思想、代码]]></summary></entry><entry><title type="html">20250211力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250211力扣每日一题"/><published>2025-02-11T03:15:07+00:00</published><updated>2025-02-11T03:15:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<p>&lt;-高臭臭</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0II-480.webp 480w,/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0II-800.webp 800w,/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0II-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0II.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="猫和老鼠" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="猫和老鼠">猫和老鼠</h2> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MOUSE_TURN</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">CAT_TURN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">UNKNOWN</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MOUSE_WIN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">CAT_WIN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MAX_MOVES</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dirs</span> <span class="o">=</span> <span class="p">{{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">}};</span>
    <span class="kt">int</span> <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">grid</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">catJump</span><span class="p">,</span> <span class="n">mouseJump</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">food</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">degrees</span><span class="p">[</span><span class="mi">64</span><span class="p">][</span><span class="mi">64</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">results</span><span class="p">[</span><span class="mi">64</span><span class="p">][</span><span class="mi">64</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>

    <span class="kt">bool</span> <span class="nf">canMouseWin</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">grid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">catJump</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mouseJump</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">rows</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">cols</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">grid</span> <span class="o">=</span> <span class="n">grid</span><span class="p">;</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">catJump</span> <span class="o">=</span> <span class="n">catJump</span><span class="p">;</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">mouseJump</span> <span class="o">=</span> <span class="n">mouseJump</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">startMouse</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">startCat</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">cols</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'M'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">startMouse</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'C'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">startCat</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'F'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">food</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">degrees</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">degrees</span><span class="p">));</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">results</span><span class="p">));</span>
        <span class="n">queue</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">qu</span><span class="p">;</span>
        <span class="c1">// 计算每个状态的度</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mouse</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">;</span> <span class="n">mouse</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">mouseRow</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">mouseCol</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">mouseRow</span><span class="p">][</span><span class="n">mouseCol</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cat</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">;</span> <span class="n">cat</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">catRow</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">catCol</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">catRow</span><span class="p">][</span><span class="n">catCol</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">degrees</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
                <span class="n">degrees</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span> <span class="n">dir</span> <span class="o">:</span> <span class="n">dirs</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">mouseRow</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span> <span class="o">=</span> <span class="n">mouseCol</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">cols</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span> <span class="o">&amp;&amp;</span> <span class="n">jump</span> <span class="o">&lt;=</span> <span class="n">mouseJump</span><span class="p">;</span> <span class="n">row</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">int</span> <span class="n">nextMouse</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">),</span> <span class="n">nextCat</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">catRow</span><span class="p">,</span> <span class="n">catCol</span><span class="p">);</span>
                        <span class="n">degrees</span><span class="p">[</span><span class="n">nextMouse</span><span class="p">][</span><span class="n">nextCat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">catRow</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span> <span class="o">=</span> <span class="n">catCol</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">cols</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span> <span class="o">&amp;&amp;</span> <span class="n">jump</span> <span class="o">&lt;=</span> <span class="n">catJump</span><span class="p">;</span> <span class="n">row</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">int</span> <span class="n">nextMouse</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">mouseRow</span><span class="p">,</span> <span class="n">mouseCol</span><span class="p">),</span> <span class="n">nextCat</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">);</span>
                        <span class="n">degrees</span><span class="p">[</span><span class="n">nextMouse</span><span class="p">][</span><span class="n">nextCat</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 猫和老鼠在同一个单元格，猫获胜</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">;</span> <span class="n">pos</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">results</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="n">pos</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="n">pos</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="n">pos</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="n">pos</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">MOUSE_TURN</span><span class="p">);</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">CAT_TURN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// 猫和食物在同一个单元格，猫获胜</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">mouse</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mouse</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">;</span> <span class="n">mouse</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">mouseRow</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">mouseCol</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">mouseRow</span><span class="p">][</span><span class="n">mouseCol</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span> <span class="o">||</span> <span class="n">mouse</span> <span class="o">==</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">food</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">food</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">food</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">food</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">food</span><span class="p">,</span> <span class="n">MOUSE_TURN</span><span class="p">);</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">food</span><span class="p">,</span> <span class="n">CAT_TURN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cat</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cat</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">;</span> <span class="n">cat</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">catRow</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">catCol</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">catRow</span><span class="p">][</span><span class="n">catCol</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span> <span class="o">||</span> <span class="n">cat</span> <span class="o">==</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">results</span><span class="p">[</span><span class="n">food</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">food</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">food</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">food</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">food</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">MOUSE_TURN</span><span class="p">);</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">food</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">CAT_TURN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// 拓扑排序</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">qu</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="p">[</span><span class="n">mouse</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">turn</span><span class="p">]</span> <span class="o">=</span> <span class="n">qu</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">turn</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">moves</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">turn</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">prevStates</span> <span class="o">=</span> <span class="n">getPrevStates</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">turn</span><span class="p">);</span>
            <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="p">[</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">]</span> <span class="o">:</span> <span class="n">prevStates</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">UNKNOWN</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">bool</span> <span class="n">canWin</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">MOUSE_WIN</span> <span class="o">&amp;&amp;</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">CAT_WIN</span> <span class="o">&amp;&amp;</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">CAT_TURN</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">canWin</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
                        <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">moves</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="n">degrees</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">degrees</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                            <span class="kt">int</span> <span class="n">loseResult</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">CAT_WIN</span> <span class="o">:</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
                            <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">loseResult</span><span class="p">;</span>
                            <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">moves</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">results</span><span class="p">[</span><span class="n">startMouse</span><span class="p">][</span><span class="n">startCat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">MOUSE_WIN</span> <span class="o">&amp;&amp;</span> <span class="n">results</span><span class="p">[</span><span class="n">startMouse</span><span class="p">][</span><span class="n">startCat</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">MAX_MOVES</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">getPrevStates</span><span class="p">(</span><span class="kt">int</span> <span class="n">mouse</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cat</span><span class="p">,</span> <span class="kt">int</span> <span class="n">turn</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">prevStates</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">mouseRow</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">mouseCol</span> <span class="o">=</span> <span class="n">mouse</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">catRow</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">/</span> <span class="n">cols</span><span class="p">,</span> <span class="n">catCol</span> <span class="o">=</span> <span class="n">cat</span> <span class="o">%</span> <span class="n">cols</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">prevTurn</span> <span class="o">=</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">CAT_TURN</span> <span class="o">:</span> <span class="n">MOUSE_TURN</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">maxJump</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">mouseJump</span> <span class="o">:</span> <span class="n">catJump</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">startRow</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">mouseRow</span> <span class="o">:</span> <span class="n">catRow</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">startCol</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">mouseCol</span> <span class="o">:</span> <span class="n">catCol</span><span class="p">;</span>
        <span class="n">prevStates</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span> <span class="n">dir</span> <span class="o">:</span> <span class="n">dirs</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startRow</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">j</span> <span class="o">=</span> <span class="n">startCol</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">cols</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span> <span class="o">&amp;&amp;</span> <span class="n">jump</span> <span class="o">&lt;=</span> <span class="n">maxJump</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">jump</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">prevMouseRow</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">mouseRow</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">prevMouseCol</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">j</span> <span class="o">:</span> <span class="n">mouseCol</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">prevCatRow</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">catRow</span> <span class="o">:</span> <span class="n">i</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">prevCatCol</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">catCol</span> <span class="o">:</span> <span class="n">j</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">prevMouse</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">prevMouseRow</span><span class="p">,</span> <span class="n">prevMouseCol</span><span class="p">);</span>
                <span class="kt">int</span> <span class="n">prevCat</span> <span class="o">=</span> <span class="n">getPos</span><span class="p">(</span><span class="n">prevCatRow</span><span class="p">,</span> <span class="n">prevCatCol</span><span class="p">);</span>
                <span class="n">prevStates</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">prevStates</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">getPos</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">row</span> <span class="o">*</span> <span class="n">cols</span> <span class="o">+</span> <span class="n">col</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">拓扑排序</title><link href="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="拓扑排序"/><published>2025-02-11T00:00:00+00:00</published><updated>2025-02-11T00:00:00+00:00</updated><id>https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">20250210力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250210力扣每日一题"/><published>2025-02-10T13:15:07+00:00</published><updated>2025-02-10T13:15:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0-480.webp 480w,/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0-800.webp 800w,/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E7%8C%AB%E5%92%8C%E8%80%81%E9%BC%A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="猫和老鼠" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>还没研究明白……</li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>还没研究明白……</li> </ul> <h2 id="实现代码">实现代码</h2> <ul> <li>还没研究明白……</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MOUSE_TURN</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">CAT_TURN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">DRAW</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MOUSE_WIN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">CAT_WIN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">degrees</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">results</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">catMouseGame</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">graph</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">;</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">degrees</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">results</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
        <span class="n">queue</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">qu</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">degrees</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
                <span class="n">degrees</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">:</span> <span class="n">graph</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">degrees</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">node</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">MOUSE_TURN</span><span class="p">);</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">CAT_TURN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">CAT_TURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">CAT_WIN</span><span class="p">;</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">MOUSE_TURN</span><span class="p">);</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">CAT_TURN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">qu</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="p">[</span><span class="n">mouse</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">turn</span><span class="p">]</span> <span class="o">=</span> <span class="n">qu</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">qu</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="n">mouse</span><span class="p">][</span><span class="n">cat</span><span class="p">][</span><span class="n">turn</span><span class="p">];</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">prevStates</span> <span class="o">=</span> <span class="n">GetPrevStates</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">turn</span><span class="p">);</span>
            <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span> <span class="p">[</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">]</span> <span class="o">:</span> <span class="n">prevStates</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span> <span class="o">==</span> <span class="n">DRAW</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">bool</span> <span class="n">canWin</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">MOUSE_WIN</span> <span class="o">&amp;&amp;</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">CAT_WIN</span> <span class="o">&amp;&amp;</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">CAT_TURN</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">canWin</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
                        <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="o">--</span><span class="n">degrees</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">int</span> <span class="n">loseResult</span> <span class="o">=</span> <span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">CAT_WIN</span> <span class="o">:</span> <span class="n">MOUSE_WIN</span><span class="p">;</span>
                        <span class="n">results</span><span class="p">[</span><span class="n">prevMouse</span><span class="p">][</span><span class="n">prevCat</span><span class="p">][</span><span class="n">prevTurn</span><span class="p">]</span> <span class="o">=</span> <span class="n">loseResult</span><span class="p">;</span>
                        <span class="n">qu</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">prevMouse</span><span class="p">,</span> <span class="n">prevCat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">results</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="n">MOUSE_TURN</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">GetPrevStates</span><span class="p">(</span><span class="kt">int</span> <span class="n">mouse</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cat</span><span class="p">,</span> <span class="kt">int</span> <span class="n">turn</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">prevStates</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">prevTurn</span> <span class="o">=</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span> <span class="o">?</span> <span class="n">CAT_TURN</span> <span class="o">:</span> <span class="n">MOUSE_TURN</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prevTurn</span> <span class="o">==</span> <span class="n">MOUSE_TURN</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span> <span class="n">prev</span> <span class="o">:</span> <span class="n">graph</span><span class="p">[</span><span class="n">mouse</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">prevStates</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">cat</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span> <span class="n">prev</span> <span class="o">:</span> <span class="n">graph</span><span class="p">[</span><span class="n">cat</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">prevStates</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">mouse</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">prevTurn</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">prevStates</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250209力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250209力扣每日一题"/><published>2025-02-09T08:11:07+00:00</published><updated>2025-02-09T08:11:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">BFS</title><link href="https://blueberrymann.github.io/blog/2025/BFS/" rel="alternate" type="text/html" title="BFS"/><published>2025-02-08T12:52:45+00:00</published><updated>2025-02-08T12:52:45+00:00</updated><id>https://blueberrymann.github.io/blog/2025/BFS</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/BFS/"><![CDATA[<h1 id="走迷宫">走迷宫</h1> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E8%B5%B0%E8%BF%B7%E5%AE%AB-480.webp 480w,/assets/img/screenshot/%E8%B5%B0%E8%BF%B7%E5%AE%AB-800.webp 800w,/assets/img/screenshot/%E8%B5%B0%E8%BF%B7%E5%AE%AB-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E8%B5%B0%E8%BF%B7%E5%AE%AB.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="螺旋矩阵II" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>队列：<strong>先进先出</strong></li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">;</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>初始化<code class="language-plaintext highlighter-rouge">g[N][N], d[N][N]</code> <ul> <li><code class="language-plaintext highlighter-rouge">g[N][N]</code>：用来记录迷宫地图</li> <li><code class="language-plaintext highlighter-rouge">d[N][N]</code>：用来记录该点距离原点的距离</li> </ul> </li> <li>使用<code class="language-plaintext highlighter-rouge">bfs</code>对每个节点进行遍历</li> <li>使用<code class="language-plaintext highlighter-rouge">queue</code>存储节点，由于先进先出的特性，我们会将距离原点距离的相同的点一次性都遍历完成，由此实现bfs</li> <li>对单一节点，4个方向都要进行遍历</li> <li>遍历结束后，返回<code class="language-plaintext highlighter-rouge">d[n - 1][m - 1]</code></li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">PII</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">110</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">g</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">],</span>  <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">bfs</span><span class="p">(){</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>

    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>

    <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">});</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">PII</span><span class="o">&gt;</span> <span class="n">directions</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>


    <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
        <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>



        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">directions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">directions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">g</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">});</span>
                <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">t</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bfs</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="acwing"/><summary type="html"><![CDATA[学习BFS思想和板子]]></summary></entry><entry><title type="html">20250208力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0208%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250208力扣每日一题"/><published>2025-02-08T08:24:07+00:00</published><updated>2025-02-08T08:24:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0208%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0208%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II-480.webp 480w,/assets/img/screenshot/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II-800.webp 800w,/assets/img/screenshot/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="螺旋矩阵II" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>二维数组的初始化：</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>使用动态规划解决这道问题，首先构建dp数组，记录到当前这一点有多少条路径</li> <li>接下来构建状态转移方程，公式如下</li> </ul> \[f(i,j) = \left\{ \begin{array}{cl} 0 &amp; i=0 \text{ or }j=0 \\ f(i-1,j)+f(i,j-1) &amp; i\geq1,j\geq1 \end{array} \right.\] <ul> <li>当遇到障碍物时，遍历节点不用做任何更改，跳过当前循环即可，这样保证状态转移方程对于没有障碍物的结点是合理的</li> <li>如果没有遇到障碍物，则利用状态转移方程进行计算</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">uniquePathsWithObstacles</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">obstacleGrid</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">directions</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>

        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">obstacleGrid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">obstacleGrid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">obstacleGrid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">obstacleGrid</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">obstacleGrid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="k">else</span><span class="p">{</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">20250207力扣每日一题</title><link href="https://blueberrymann.github.io/blog/2025/0207%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/" rel="alternate" type="text/html" title="20250207力扣每日一题"/><published>2025-02-07T11:24:07+00:00</published><updated>2025-02-07T11:24:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/0207%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/0207%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/screenshot/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II-480.webp 480w,/assets/img/screenshot/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II-800.webp 800w,/assets/img/screenshot/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/screenshot/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="螺旋矩阵II" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="知识点">知识点</h2> <ul> <li>方向数组：配合方向index进行使用，可以在有规律的方向移动中进行使用</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">directions</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
<span class="c1">// 分别代表方向右、下、左、上</span>
</code></pre></div></div> <h2 id="解题思路">解题思路</h2> <ul> <li>本题的主要思路为模拟矩阵的生成过程</li> <li>模拟过程的难点在于方向的转换，本题我们将矩阵左上角的方块定义为<code class="language-plaintext highlighter-rouge">(0, 0)</code>，即<code class="language-plaintext highlighter-rouge">row = 0, col = 0</code></li> <li>接下来我们定义一个方向转换数组，从题中观察可得，初始化的方向为<strong>右、下、左、上</strong>，所以我们的方向转化数组也模仿此过程。定义如下</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">directions</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
<span class="c1">// 分别代表方向右、下、左、上</span>
</code></pre></div></div> <ul> <li>配合<code class="language-plaintext highlighter-rouge">directionIndex</code>（确定方块的移动方向）进行使用，<code class="language-plaintext highlighter-rouge">directionIndex</code>初始化为0，每次变化为<code class="language-plaintext highlighter-rouge">directionIndex = (directionIndex + 1) % 4</code></li> <li>能够让方向切换的情况主要由以下几种： <ul> <li>下一步移动出界</li> <li>下一步移动的方位上元素值非0</li> </ul> </li> <li>如此，初始化方块进行移动，直至所有元素都被赋值</li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">generateMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 模拟</span>
        <span class="kt">int</span> <span class="n">maxNum</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 定义矩阵当前元素的值</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">matrix</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
        <span class="c1">// 初始化矩阵，全为0</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="c1">// 矩阵的左上角定义为（0， 0）</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">directions</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
        <span class="c1">// 右，下，左，上</span>
        <span class="kt">int</span> <span class="n">directionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="c1">// 当初始化元素指针“碰壁”后，该变量指定指针顺时针移动的方向</span>
        <span class="k">while</span><span class="p">(</span><span class="n">cur</span> <span class="o">&lt;=</span> <span class="n">maxNum</span><span class="p">){</span>
            <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
            <span class="c1">// 为当前元素赋值</span>
            <span class="n">cur</span> <span class="o">++</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">nextRow</span> <span class="o">=</span> <span class="n">row</span> <span class="o">+</span> <span class="n">directions</span><span class="p">[</span><span class="n">directionIndex</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">nextCol</span> <span class="o">=</span> <span class="n">col</span> <span class="o">+</span> <span class="n">directions</span><span class="p">[</span><span class="n">directionIndex</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
            <span class="c1">// 检验下一行列的位置</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nextRow</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nextRow</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">nextCol</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nextCol</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">matrix</span><span class="p">[</span><span class="n">nextRow</span><span class="p">][</span><span class="n">nextCol</span><span class="p">]){</span>
                <span class="c1">// 如果下一行列超出矩阵边框或者“碰壁”，就要转向</span>
                <span class="n">directionIndex</span> <span class="o">=</span> <span class="p">(</span><span class="n">directionIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">// 经过检验后的移动方向</span>
            <span class="n">row</span> <span class="o">+=</span> <span class="n">directions</span><span class="p">[</span><span class="n">directionIndex</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">col</span> <span class="o">+=</span> <span class="n">directions</span><span class="p">[</span><span class="n">directionIndex</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="c1">// 返回赋值后的矩阵</span>
        <span class="k">return</span> <span class="n">matrix</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><category term="每日一题"/><summary type="html"><![CDATA[记录每日一题的解题思路的求解代码]]></summary></entry><entry><title type="html">hot100系列——链表</title><link href="https://blueberrymann.github.io/blog/2025/hot100-%E9%93%BE%E8%A1%A8/" rel="alternate" type="text/html" title="hot100系列——链表"/><published>2025-02-05T03:56:07+00:00</published><updated>2025-02-05T03:56:07+00:00</updated><id>https://blueberrymann.github.io/blog/2025/hot100-%E9%93%BE%E8%A1%A8</id><content type="html" xml:base="https://blueberrymann.github.io/blog/2025/hot100-%E9%93%BE%E8%A1%A8/"><![CDATA[<h1 id="相交链表">相交链表</h1> <p><img src="/assets/img/screenshot/相交链表.png" alt=""/></p> <h2 id="知识点">知识点</h2> <ul> <li><code class="language-plaintext highlighter-rouge">unordered_set</code>是一个集合，也称为哈希集合 <ul> <li>只存储单个值（与<code class="language-plaintext highlighter-rouge">unordered_map</code>区分）</li> <li>每个元素都是唯一的</li> <li>元素不能修改，只能插入或者删除</li> <li>主要用于快速检查元素是否存在</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">unorderd_set</code>的<code class="language-plaintext highlighter-rouge">count</code>操作是用来查找集合中元素的个数的，由于<code class="language-plaintext highlighter-rouge">unorderd_set</code>中的元素都是唯一的，所以<code class="language-plaintext highlighter-rouge">count</code>操作的返回值只有<strong>0或1</strong></li> </ul> <h2 id="解题思路">解题思路</h2> <ul> <li>首先遍历链表A，并将链表A中的中的每一个节点存入<code class="language-plaintext highlighter-rouge">unordered_set</code>中</li> <li>接下来遍历链表B，使用<code class="language-plaintext highlighter-rouge">count</code>操作判断该节点是否在链表A中也存在 <ul> <li>如果存在，则说明该节点即为相交节点</li> <li>如果不存在，则继续遍历</li> </ul> </li> </ul> <h2 id="实现代码">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">getIntersectionNode</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">headA</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">headB</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="n">visited</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">headA</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">headB</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">temp</span><span class="p">))</span>
                <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="回文链表">回文链表</h1> <p><img src="/assets/img/screenshot/回文链表.png" alt=""/></p> <h2 id="知识点-1">知识点</h2> <ul> <li>需要解决回文字符串的前序知识</li> </ul> <h2 id="解题思路-1">解题思路</h2> <ul> <li>将链表遍历，每个节点的值存入数组中</li> <li>初始化左指针<code class="language-plaintext highlighter-rouge">l = 0</code>，右指针<code class="language-plaintext highlighter-rouge">r = list.size() - 1</code>，分别从数组两端进行遍历，直到<code class="language-plaintext highlighter-rouge">l &gt;= r</code> <ul> <li>如果指针指向的两个字母不相同，那么返回<code class="language-plaintext highlighter-rouge">false</code></li> <li>如果遍历完整结束，则返回<code class="language-plaintext highlighter-rouge">true</code></li> </ul> </li> </ul> <h2 id="实现代码-1">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">isPalindrome</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="n">list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">val</span><span class="p">);</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">!=</span> <span class="n">list</span><span class="p">[</span><span class="n">r</span><span class="p">])</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="n">l</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">r</span> <span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="环形链表">环形链表</h1> <p><img src="/assets/img/screenshot/环形列表.png" alt=""/></p> <h2 id="知识点-2">知识点</h2> <ul> <li>需要相交链表的前序知识</li> </ul> <h2 id="解题思路-2">解题思路</h2> <ul> <li>初始化一个<code class="language-plaintext highlighter-rouge">unordered_set</code>用于存储已经遍历过的结点</li> <li>每次遍历前首先判断一下这个节点是否已经在<code class="language-plaintext highlighter-rouge">unordered_set</code>中 <ul> <li>如果已经在<code class="language-plaintext highlighter-rouge">unordered_set</code>中，说明链表有重复部分（环），则返回<code class="language-plaintext highlighter-rouge">true</code></li> <li>如果遍历到指针为空，则说明无环，返回<code class="language-plaintext highlighter-rouge">false</code></li> </ul> </li> </ul> <h2 id="实现代码-2">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">hasCycle</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="n">visited</span><span class="p">;</span>

        <span class="n">ListNode</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">temp</span><span class="p">)){</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>


</code></pre></div></div> <h1 id="环形链表ii">环形链表II</h1> <h1 id="合并两个有序链表">合并两个有序链表</h1> <h1 id="两数相加">两数相加</h1> <p><img src="/assets/img/screenshot/两数相加.png" alt=""/></p> <h2 id="知识点-3">知识点</h2> <ul> <li>AcWing大数相加模版</li> </ul> <h2 id="解题思路-3">解题思路</h2> <ul> <li>将两个链表转化为数组存储</li> <li>使用大数相加模版</li> </ul> <h2 id="实现代码-3">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>

    <span class="n">ListNode</span><span class="o">*</span> <span class="n">add</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">){</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
                <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
                <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">){</span>
            <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">num</span><span class="o">:</span> <span class="n">c</span><span class="p">){</span>
            <span class="n">ListNode</span> <span class="o">*</span><span class="n">nxt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
            <span class="n">cur</span> <span class="o">-&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">nxt</span><span class="p">;</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">nxt</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ListNode</span><span class="o">*</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">l1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="n">a</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">val</span><span class="p">);</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">l2</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
            <span class="n">b</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">val</span><span class="p">);</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
            <span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h1 id="删除链表的倒数第n个节点">删除链表的倒数第N个节点</h1> <p><img src="/assets/img/screenshot/删除链表的倒数第N个结点.png" alt=""/></p> <h2 id="知识点-4">知识点</h2> <ul> <li>哑结点：</li> </ul> <h2 id="解题思路-4">解题思路</h2> <h2 id="实现代码-4">实现代码</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>

    <span class="kt">int</span> <span class="n">getLength</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">head</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="p">){</span>
            <span class="o">++</span> <span class="n">length</span><span class="p">;</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">length</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ListNode</span><span class="o">*</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">head</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">getLength</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">dummy</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">ans</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="k">delete</span> <span class="n">dummy</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning-notebook"/><category term="code"/><category term="algorithm"/><category term="leetcode"/><summary type="html"><![CDATA[hot100系列——链表的学习笔记：知识点、思想、代码]]></summary></entry></feed>